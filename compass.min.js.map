{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/cp","compass.js","node_modules/clusterfck/lib/clusterfck.js","node_modules/clusterfck/lib/distance.js","node_modules/clusterfck/lib/hcluster.js","node_modules/clusterfck/lib/kmeans.js","src/cluster/cluster.js","src/cluster/clusterconsts.js","src/cluster/distance.js","src/consts.js","src/gen/aggregates.js","src/gen/encodings.js","src/gen/encs.js","src/gen/gen.js","src/gen/marktypes.js","src/gen/projections.js","src/globals.js","src/rank/rank.js","src/rank/rankEncodings.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","cp","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"consts","cluster","gen","rank","util","auto","./cluster/cluster","./consts","./gen/gen","./rank/rank","./util",2,"hcluster","Kmeans","kmeans","./hcluster","./kmeans",3,"euclidean","v1","v2","total","Math","pow","sqrt","manhattan","abs","max",4,"distances","HierarchicalClustering","distance","linkage","threshold","this","undefined","Infinity","prototype","items","snapshotPeriod","snapshotCb","clusters","dists","mins","index","value","key","size","j","dist","merged","mergeClosest","forEach","minKey","min","c1","c2","left","right","splice","ci","key1","key2","snapshot","snapshotCallback","./distance",5,"KMeans","centroids","randomCentroids","points","k","slice","sort","round","random","classify","point","ceil","assignment","Array","iterations","movement","assigned","push","centroid","newCentroid","g","sum","toJSON","JSON","stringify","fromJSON","json","parse","vectors",6,"encodings","opt","table","clusterTrees","clusterfck","e1","e2","s1","vl","Encoding","shorthand","s2","CLUSTER_THRESHOLD","map","tree","traverse","encoding1","encoding2","score","filter","cluster1","cluster2","../util","./clusterconsts",7,"reduceTupleToTable","x","b","d","c","SWAPPABLE","DIST_MISSING","DIST_BY_ENCTYPE","reduce",8,"len","colencs","getEncTypeByColumnName","shorthands","diff","sj","si","get","colenc1","colenc2","cols","union","keys","col","encType","isStack1","isStack","isStack2","enc","color","name","encoding","_colenc","duplicate","marktype",9,"projections","type","properties","omitDotPlot","default","description","maxCardinalityForAutoAddOrdinal","alwaysAddHistogram","aggregates","config","data","tableTypes","enum","genDimQ","minCardinalityForBin","omitMeasureOnly","omitDimensionOnly","addCountForDimensionOnly","aggrList","timeFnList","consistentAutoQ","marktypeList","encodingTypeList","maxGoodCardinalityForFacets","maxCardinalityForFacets","maxGoodCardinalityForColor","maxCardinalityForColor","maxCardinalityForShape","omitTranpose","omitDotPlotWithExtraEncoding","omitMultipleRetinalEncodings","omitNonTextAggrWithAllDimsOnFacets","omitSizeOnBar","omitStackedAverage","alwaysGenerateTableAsHeatmap",10,"genAggregates","output","fields","stats","emit","fieldSet","field","checkAndPush","hasMeasure","hasDimension","hasRaw","tf","isDimension","aggr","count","pop","assignAggrQ","hasAggr","autoMode","canHaveAggr","cantHaveAggr","assignField","assignBinQ","bin","assignQ","_aggr","_raw","_bin","ANY","isin","hasO","highCardinality","cardinality","isAuto","genBin","genCast","assignFnT","fn","assignT","_fn","schema","extend","any","../consts",11,"genEncodingsFromFields","nested","encs","genEncs","dict","genEncodingsFromEncs","list","getMarktypes","markType","finalTouch","scoreFeatures","features","text","et","isMeasure","isCount","stat","stdev","avg","scale","zero","../rank/rank","./encs","./marktypes",12,"retinalEncRules","shape","alpha","colorRules","shapeRules","dimMeaTransposeRule","y","generalRules","genMarkTypes","satisfyRules","geo","arc","row","isAggrWithAllDimOnFacets","isDimX","isDimY","isAggregate","tmpEnc","isDim","rules","dimension","measure","multiple","detail","hasOtherO","../globals",13,"marktypes","charts","cfg","flat","getOpt","fieldSets","genAggr","level","nestedReduce","nestedMap","./aggregates","./encodings","./projections",14,"markTypes","vlmarktypes","facetRule","facetsRule","pointRule","xIsDim","yIsDim","tickRule","isOrdinalScale","barRule","lineRule","areaRule","textRule","marksRule","rule","bar","line","area","tick","mark","compile","marks","reqs","requiredEncoding","support","supportedEncoding",15,"selected","fieldsToAdd","hasSelectedDimension","hasSelectedMeasure","indices","compareFieldsToAdd","setsToAdd","chooseKorLess","setToAdd","concat","typeIsMeasureScore","O","T","Q","projection","join",16,"CHART_TYPES","TABLE","BAR","PLOT","LINE","AREA","MAP","HISTOGRAM","ANY_DATA_TYPES",17,"./rankEncodings",18,"rankEncodings","encTypes","encodingMappingByField","mappings","reasons","m","assign","scores","role","reason","apply","UNUSED_POSITION","MARK_SCORE","p","circle","square","D","M","BAD","TERRIBLE","minor","pos","Y_T","facet_text","facet_good","facet_ok","facet_bad","color_good","color_ok","color_bad","color_stack","bad","terrible","dimensionScore","hasOrder","isStacked","measureScore",19,"isArray","obj","toString","sp","v","nonEmpty","grp","node","arr","Object","create","DEFAULT_OPT","powerset","ps","subset","sub","chooseK","kArray","cross"],"mappings":"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","file":"compass.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.cp=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n\n},{\"./cluster/cluster\":6,\"./consts\":9,\"./gen/gen\":13,\"./rank/rank\":17,\"./util\":19}],2:[function(require,module,exports){\nmodule.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};\n},{\"./hcluster\":4,\"./kmeans\":5}],3:[function(require,module,exports){\nmodule.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};\n},{}],4:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n\n},{\"./distance\":3}],5:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}\n},{\"./distance\":3}],6:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(encodings, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(encodings);\n\n  var clusterTrees = clusterfck.hcluster(encodings, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(encoding1, encoding2) {\n      // sort each cluster -- have the highest score as 1st item\n      return encoding2.score - encoding1.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0].score - cluster1[0].score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":19,\"./clusterconsts\":7,\"./distance\":8,\"clusterfck\":2}],7:[function(require,module,exports){\n'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['color', 'alpha', c.SWAPPABLE],\n  ['size', 'alpha', c.SWAPPABLE],\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n\n},{}],8:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e) { return distance.getEncTypeByColumnName(e); }),\n    shorthands = encodings.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (colenc1, colenc2) {\n  var cols = util.union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(colenc1),\n    isStack2 = vl.Encoding.isStack(colenc2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(colenc1.enc.color.name !== colenc2.enc.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.getEncTypeByColumnName = function(encoding) {\n  var _colenc = {},\n    enc = encoding.enc;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.encType = encType;\n    _colenc[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc,\n    enc: encoding.enc\n  };\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":19,\"./clusterconsts\":7}],9:[function(require,module,exports){\n'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'avg']\n    },\n    timeFnList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, alpha, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n\n\n\n},{}],10:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null);\n\nvar consts = require('../consts');\n\nvar ANY='*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fields.length);\n  var hasO = vl.any(fields, function(f) {\n    return f.type === 'O';\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.field.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.field.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggr) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.field.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggr = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggr;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fields[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggr === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggr = f.aggr;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggr) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggr);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === ANY || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [ANY, 'bin', 'cast', 'autocast'])) && !hasO) {\n        var highCardinality = vl.field.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [ANY, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [ANY, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignFnT(i, hasAggr, autoMode, fn) {\n    tf[i].fn = fn;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].fn;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fields[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._fns\n    if (f._fn) {\n      assignFnT(i, hasAggr, autoMode, f._fn);\n    } else {\n      opt.timeFnList.forEach(function(fn) {\n        if (fn === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignFnT(i, hasAggr, autoMode, fn);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fields.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fields[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case 'Q':\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case 'T':\n        assignT(i, hasAggr, autoMode);\n        break;\n\n      case 'O':\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, ANY);\n\n  return output;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9}],11:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  genEncs = require('./encs'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genEncodingsFromFields;\n\nfunction genEncodingsFromFields(output, fields, stats, opt, nested) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encs = genEncs([], fields, stats, opt);\n\n  if (nested) {\n    return encs.reduce(function(dict, enc) {\n      dict[enc] = genEncodingsFromEncs([], enc, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encs.reduce(function(list, enc) {\n      return genEncodingsFromEncs(list, enc, stats, opt);\n    }, []);\n  }\n}\n\nfunction genEncodingsFromEncs(output, enc, stats, opt) {\n  getMarktypes(enc, stats, opt)\n    .forEach(function(markType) {\n      var e = vl.duplicate({\n          data: opt.data,\n          marktype: markType,\n          enc: enc,\n          config: opt.config\n        }),\n        encoding = finalTouch(e, stats, opt),\n        score = rank.encoding(encoding, stats, opt);\n\n      encoding.score = score.score;\n      encoding.scoreFeatures = score.features;\n      output.push(encoding);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(encoding, stats, opt) {\n  if (encoding.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    encoding.enc.color = encoding.enc.text;\n  }\n\n  // don't include zero if stdev/avg < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var enc = encoding.enc;\n  ['x', 'y'].forEach(function(et) {\n    var field = enc[et];\n    if (field && vl.field.isMeasure(field) && !vl.field.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat.stdev / stat.avg < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return encoding;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9,\"../rank/rank\":17,\"./encs\":12,\"./marktypes\":14}],12:[function(require,module,exports){\n(function (global){\n\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.field.isDimension,\n  isMeasure = vl.field.isMeasure;\n\nmodule.exports = genEncs;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  alpha: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(enc, field, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (enc.color || enc.size || enc.shape || enc.alpha) return false;\n  }\n  return true;\n}\n\nfunction colorRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  return vl.field.isMeasure(field) ||\n    vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  if (field.bin && field.type === 'Q') return false;\n  if (field.fn && field.type === 'T') return false;\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(enc) {\n  // create horizontal histogram for ordinal\n  if (enc.y.type === 'O' && isMeasure(enc.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(enc.y) && (enc.x.type !== 'O' && isDimension(enc.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(enc, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (enc.text) {\n    return genMarkTypes.satisfyRules(enc, 'text', stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (enc.x || enc.y || enc.geo || enc.arc) {\n\n    if (enc.row || enc.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!enc.x || !enc.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncs.isAggrWithAllDimOnFacets(enc)) return false;\n      }\n    }\n\n    if (enc.x && enc.y) {\n      var isDimX = !!isDimension(enc.x),\n        isDimY = !!isDimension(enc.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(enc)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(enc)) return false;\n        } else if (enc.y.type==='T' || enc.x.type === 'T') {\n          if (enc.y.type==='T' && enc.x.type !== 'T') return false;\n        } else { // show only one OxO, QxQ\n          if (enc.x.name > enc.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // one dimension \"count\" is useless\n    if (enc.x && enc.x.aggr == 'count' && !enc.y) return false;\n    if (enc.y && enc.y.aggr == 'count' && !enc.x) return false;\n\n    return true;\n  }\n  return false;\n}\n\ngenEncs.isAggrWithAllDimOnFacets = function (enc) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in enc) {\n    var field = enc[encType];\n    if (field.aggr) {\n      hasAggr = true;\n    }\n    if (vl.field.isDimension(field) && (encType !== 'row' && encType !== 'col')) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncs(encs, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  // generate a collection vega-lite's enc\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEnc, stats, opt)) {\n        encs.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in opt.encodingTypeList) {\n      var et = opt.encodingTypeList[j],\n        isDim = isDimension(field);\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) && // encoding not used\n        ((isDim && rules[et].dimension) || (!isDim && rules[et].measure)) &&\n        (!rules[et].rules || rules[et].rules(tmpEnc, field, stats, opt))\n      ) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encs;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9,\"../globals\":16,\"./marktypes\":14}],13:[function(require,module,exports){\n'use strict';\n\nvar util = require('../util');\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variatons\n  encodings: require('./encodings'),\n  encs: require('./encs'),\n  marktypes: require('./marktypes')\n};\n\ngen.charts = function(fields, opt, cfg, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fields, opt) : [fields],\n    encs, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggr)) {\n    encs = fieldSets.reduce(function(output, fields) {\n      return gen.encs(output, fields, opt);\n    }, []);\n  } else {\n    encs = fieldSets.map(function(fields) {\n      return gen.encs([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encs, function(output, enc) {\n      return gen.marktypes(output, enc, opt, cfg);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encs, function(enc) {\n      return gen.marktypes([], enc, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};\n},{\"../util\":19,\"./aggregates\":10,\"./encodings\":11,\"./encs\":12,\"./marktypes\":14,\"./projections\":15}],14:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  isDimension = vl.field.isDimension,\n  isOrdinalScale = vl.field.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(enc, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n\n  var markTypes = opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(enc, markType, stats, opt);\n  });\n\n  return markTypes;\n}\n\nvlmarktypes.satisfyRules = function (enc, markType, stats, opt) {\n  var mark = vl.compile.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in enc)) return false;\n  }\n\n  for (var encType in enc) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](enc, stats, opt);\n};\n\nfunction facetRule(field, stats, opt) {\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(enc, stats, opt) {\n  if(enc.row && !facetRule(enc.row, stats, opt)) return false;\n  if(enc.col && !facetRule(enc.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDimension(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(enc, stats, opt) {\n  // jshint unused:false\n  if (enc.x || enc.y) {\n    if(vl.enc.isAggregate(enc)) return false;\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    return (!xIsDim && (!enc.y || isOrdinalScale(enc.y))) ||\n      (!yIsDim && (!enc.x || isOrdinalScale(enc.x)));\n  }\n  return false;\n}\n\nfunction barRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // need to aggregate on either x or y\n  if (opt.omitSizeOnBar && enc.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  if (((enc.x.aggr !== undefined) ^ (enc.y.aggr !== undefined)) &&\n      (isDimension(enc.x) ^ isDimension(enc.y))) {\n\n    var aggr = enc.x.aggr || enc.y.aggr;\n    return !(opt.omitStackedAverage && aggr ==='avg' && enc.color);\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x.type == 'T' && enc.x.fn && enc.y.type == 'Q' && enc.y.aggr;\n}\n\nfunction areaRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  if(!lineRule(enc, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && enc.y.aggr ==='avg' && enc.color);\n}\n\nfunction textRule(enc, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (enc.row || enc.col) && enc.text && enc.text.aggr && !enc.x && !enc.y && !enc.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !enc.color);\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9}],15:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fields array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fields.forEach(function(field, index){\n    //save indices for stable sort later\n    indices[field.name] = index;\n\n    if (field.selected) {\n      selected.push(field);\n      if (isDimension(field) || field.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (field.selected !== false && !vl.field.isCount(field)) {\n      if (vl.field.isDimension(field) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.field.cardinality(field, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(field);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  O: 0,\n  T: 1,\n  Q: 2\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.field.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9,\"../util\":19}],16:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar g = global || window;\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],17:[function(require,module,exports){\nmodule.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n\n},{\"./rankEncodings\":18}],18:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(encoding, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(encoding.enc),\n    marktype = encoding.marktype,\n    enc = encoding.enc;\n\n  var encodingMappingByField = vl.enc.reduce(encoding.enc, function(o, field, encType) {\n    var key = vl.field.shorthand(field);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: field});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.field.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.field.role(m.field);\n        var score = rankEncodings.score[role](m.field, m.encType, encoding.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === 'text') {\n    // TODO\n  } else {\n    if (enc.x && enc.y) {\n      if (isDimension(enc.x) ^ isDimension(enc.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== 'text') {\n    if ((!enc.x || !enc.y) && !enc.geo && !enc.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.alpha = 0.45;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (field, encType, marktype, stats, opt){\n  var cardinality = vl.field.cardinality(field, stats);\n  switch (encType) {\n    case 'x':\n      if(field.type === 'O') return D.pos - D.minor;\n      return D.pos;\n\n    case 'y':\n      if(field.type === 'O') return D.pos - D.minor; //prefer ordinal on y\n      if(field.type === 'T') return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case 'col':\n      if (marktype === 'text') return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case 'row':\n      if (marktype === 'text') return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case 'color':\n      var hasOrder = (field.bin && field.type==='Q') || (field.fn && field.type==='T');\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype ==='bar' || marktype ==='area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case 'shape':\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case 'detail':\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (field, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case 'x': return M.pos;\n    case 'y': return M.pos;\n    case 'size':\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === 'text') return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case 'color': return M.color;\n    case 'alpha': return M.alpha;\n    case 'text': return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],19:[function(require,module,exports){\n\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n\n},{\"./consts\":9}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","module.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};","module.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};","var distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n","var distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}","\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(encodings, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(encodings);\n\n  var clusterTrees = clusterfck.hcluster(encodings, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(encoding1, encoding2) {\n      // sort each cluster -- have the highest score as 1st item\n      return encoding2.score - encoding1.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0].score - cluster1[0].score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}","'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['color', 'alpha', c.SWAPPABLE],\n  ['size', 'alpha', c.SWAPPABLE],\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e) { return distance.getEncTypeByColumnName(e); }),\n    shorthands = encodings.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (colenc1, colenc2) {\n  var cols = util.union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(colenc1),\n    isStack2 = vl.Encoding.isStack(colenc2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(colenc1.enc.color.name !== colenc2.enc.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.getEncTypeByColumnName = function(encoding) {\n  var _colenc = {},\n    enc = encoding.enc;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.encType = encType;\n    _colenc[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc,\n    enc: encoding.enc\n  };\n};","'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'avg']\n    },\n    timeFnList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, alpha, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n\n\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null);\n\nvar consts = require('../consts');\n\nvar ANY='*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fields.length);\n  var hasO = vl.any(fields, function(f) {\n    return f.type === 'O';\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.field.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.field.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggr) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.field.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggr = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggr;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fields[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggr === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggr = f.aggr;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggr) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggr);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === ANY || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [ANY, 'bin', 'cast', 'autocast'])) && !hasO) {\n        var highCardinality = vl.field.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [ANY, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [ANY, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignFnT(i, hasAggr, autoMode, fn) {\n    tf[i].fn = fn;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].fn;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fields[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._fns\n    if (f._fn) {\n      assignFnT(i, hasAggr, autoMode, f._fn);\n    } else {\n      opt.timeFnList.forEach(function(fn) {\n        if (fn === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignFnT(i, hasAggr, autoMode, fn);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fields.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fields[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case 'Q':\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case 'T':\n        assignT(i, hasAggr, autoMode);\n        break;\n\n      case 'O':\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, ANY);\n\n  return output;\n}\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  genEncs = require('./encs'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genEncodingsFromFields;\n\nfunction genEncodingsFromFields(output, fields, stats, opt, nested) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encs = genEncs([], fields, stats, opt);\n\n  if (nested) {\n    return encs.reduce(function(dict, enc) {\n      dict[enc] = genEncodingsFromEncs([], enc, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encs.reduce(function(list, enc) {\n      return genEncodingsFromEncs(list, enc, stats, opt);\n    }, []);\n  }\n}\n\nfunction genEncodingsFromEncs(output, enc, stats, opt) {\n  getMarktypes(enc, stats, opt)\n    .forEach(function(markType) {\n      var e = vl.duplicate({\n          data: opt.data,\n          marktype: markType,\n          enc: enc,\n          config: opt.config\n        }),\n        encoding = finalTouch(e, stats, opt),\n        score = rank.encoding(encoding, stats, opt);\n\n      encoding.score = score.score;\n      encoding.scoreFeatures = score.features;\n      output.push(encoding);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(encoding, stats, opt) {\n  if (encoding.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    encoding.enc.color = encoding.enc.text;\n  }\n\n  // don't include zero if stdev/avg < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var enc = encoding.enc;\n  ['x', 'y'].forEach(function(et) {\n    var field = enc[et];\n    if (field && vl.field.isMeasure(field) && !vl.field.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat.stdev / stat.avg < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return encoding;\n}","\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.field.isDimension,\n  isMeasure = vl.field.isMeasure;\n\nmodule.exports = genEncs;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  alpha: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(enc, field, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (enc.color || enc.size || enc.shape || enc.alpha) return false;\n  }\n  return true;\n}\n\nfunction colorRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  return vl.field.isMeasure(field) ||\n    vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(enc, field, stats, opt) {\n  if(!retinalEncRules(enc, field, stats, opt)) return false;\n\n  if (field.bin && field.type === 'Q') return false;\n  if (field.fn && field.type === 'T') return false;\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(enc) {\n  // create horizontal histogram for ordinal\n  if (enc.y.type === 'O' && isMeasure(enc.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(enc.y) && (enc.x.type !== 'O' && isDimension(enc.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(enc, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (enc.text) {\n    return genMarkTypes.satisfyRules(enc, 'text', stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (enc.x || enc.y || enc.geo || enc.arc) {\n\n    if (enc.row || enc.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!enc.x || !enc.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncs.isAggrWithAllDimOnFacets(enc)) return false;\n      }\n    }\n\n    if (enc.x && enc.y) {\n      var isDimX = !!isDimension(enc.x),\n        isDimY = !!isDimension(enc.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(enc)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(enc)) return false;\n        } else if (enc.y.type==='T' || enc.x.type === 'T') {\n          if (enc.y.type==='T' && enc.x.type !== 'T') return false;\n        } else { // show only one OxO, QxQ\n          if (enc.x.name > enc.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // one dimension \"count\" is useless\n    if (enc.x && enc.x.aggr == 'count' && !enc.y) return false;\n    if (enc.y && enc.y.aggr == 'count' && !enc.x) return false;\n\n    return true;\n  }\n  return false;\n}\n\ngenEncs.isAggrWithAllDimOnFacets = function (enc) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in enc) {\n    var field = enc[encType];\n    if (field.aggr) {\n      hasAggr = true;\n    }\n    if (vl.field.isDimension(field) && (encType !== 'row' && encType !== 'col')) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncs(encs, fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  // generate a collection vega-lite's enc\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEnc, stats, opt)) {\n        encs.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in opt.encodingTypeList) {\n      var et = opt.encodingTypeList[j],\n        isDim = isDimension(field);\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) && // encoding not used\n        ((isDim && rules[et].dimension) || (!isDim && rules[et].measure)) &&\n        (!rules[et].rules || rules[et].rules(tmpEnc, field, stats, opt))\n      ) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encs;\n}\n","'use strict';\n\nvar util = require('../util');\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variatons\n  encodings: require('./encodings'),\n  encs: require('./encs'),\n  marktypes: require('./marktypes')\n};\n\ngen.charts = function(fields, opt, cfg, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fields, opt) : [fields],\n    encs, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggr)) {\n    encs = fieldSets.reduce(function(output, fields) {\n      return gen.encs(output, fields, opt);\n    }, []);\n  } else {\n    encs = fieldSets.map(function(fields) {\n      return gen.encs([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encs, function(output, enc) {\n      return gen.marktypes(output, enc, opt, cfg);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encs, function(enc) {\n      return gen.marktypes([], enc, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};","\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  consts = require('../consts'),\n  isDimension = vl.field.isDimension,\n  isOrdinalScale = vl.field.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(enc, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n\n  var markTypes = opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(enc, markType, stats, opt);\n  });\n\n  return markTypes;\n}\n\nvlmarktypes.satisfyRules = function (enc, markType, stats, opt) {\n  var mark = vl.compile.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in enc)) return false;\n  }\n\n  for (var encType in enc) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](enc, stats, opt);\n};\n\nfunction facetRule(field, stats, opt) {\n  return vl.field.cardinality(field, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(enc, stats, opt) {\n  if(enc.row && !facetRule(enc.row, stats, opt)) return false;\n  if(enc.col && !facetRule(enc.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDimension(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(enc, stats, opt) {\n  // jshint unused:false\n  if (enc.x || enc.y) {\n    if(vl.enc.isAggregate(enc)) return false;\n\n    var xIsDim = isDimension(enc.x),\n      yIsDim = isDimension(enc.y);\n\n    return (!xIsDim && (!enc.y || isOrdinalScale(enc.y))) ||\n      (!yIsDim && (!enc.x || isOrdinalScale(enc.x)));\n  }\n  return false;\n}\n\nfunction barRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // need to aggregate on either x or y\n  if (opt.omitSizeOnBar && enc.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  if (((enc.x.aggr !== undefined) ^ (enc.y.aggr !== undefined)) &&\n      (isDimension(enc.x) ^ isDimension(enc.y))) {\n\n    var aggr = enc.x.aggr || enc.y.aggr;\n    return !(opt.omitStackedAverage && aggr ==='avg' && enc.color);\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x.type == 'T' && enc.x.fn && enc.y.type == 'Q' && enc.y.aggr;\n}\n\nfunction areaRule(enc, stats, opt) {\n  if(!facetsRule(enc, stats, opt)) return false;\n\n  if(!lineRule(enc, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && enc.y.aggr ==='avg' && enc.color);\n}\n\nfunction textRule(enc, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (enc.row || enc.col) && enc.text && enc.text.aggr && !enc.x && !enc.y && !enc.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !enc.color);\n}","'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fields array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fields, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fields.forEach(function(field, index){\n    //save indices for stable sort later\n    indices[field.name] = index;\n\n    if (field.selected) {\n      selected.push(field);\n      if (isDimension(field) || field.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (field.selected !== false && !vl.field.isCount(field)) {\n      if (vl.field.isDimension(field) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.field.cardinality(field, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(field);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  O: 0,\n  T: 1,\n  Q: 2\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.field.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n","'use strict';\n\nvar g = global || window;\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;","module.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  isDimension = vl.field.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(encoding, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(encoding.enc),\n    marktype = encoding.marktype,\n    enc = encoding.enc;\n\n  var encodingMappingByField = vl.enc.reduce(encoding.enc, function(o, field, encType) {\n    var key = vl.field.shorthand(field);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: field});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.field.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.field.role(m.field);\n        var score = rankEncodings.score[role](m.field, m.encType, encoding.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === 'text') {\n    // TODO\n  } else {\n    if (enc.x && enc.y) {\n      if (isDimension(enc.x) ^ isDimension(enc.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== 'text') {\n    if ((!enc.x || !enc.y) && !enc.geo && !enc.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.alpha = 0.45;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (field, encType, marktype, stats, opt){\n  var cardinality = vl.field.cardinality(field, stats);\n  switch (encType) {\n    case 'x':\n      if(field.type === 'O') return D.pos - D.minor;\n      return D.pos;\n\n    case 'y':\n      if(field.type === 'O') return D.pos - D.minor; //prefer ordinal on y\n      if(field.type === 'T') return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case 'col':\n      if (marktype === 'text') return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case 'row':\n      if (marktype === 'text') return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case 'color':\n      var hasOrder = (field.bin && field.type==='Q') || (field.fn && field.type==='T');\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype ==='bar' || marktype ==='area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case 'shape':\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case 'detail':\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (field, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case 'x': return M.pos;\n    case 'y': return M.pos;\n    case 'size':\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === 'text') return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case 'color': return M.color;\n    case 'alpha': return M.alpha;\n    case 'text': return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n","\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n"],"sourceRoot":"/source/"}