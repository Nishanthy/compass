{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/clusterfck/lib/clusterfck.js","compass.js","node_modules/clusterfck/lib/distance.js","node_modules/clusterfck/lib/hcluster.js","node_modules/clusterfck/lib/kmeans.js","node_modules/vega-lite/src/globals.js","src/cluster/cluster.js","src/cluster/clusterconsts.js","src/cluster/distance.js","src/consts.js","src/cp","src/gen/aggregates.js","src/gen/encodings.js","src/gen/gen.js","src/gen/marktypes.js","src/gen/projections.js","src/gen/specs.js","src/globals.js","src/rank/rank.js","src/rank/rankEncodings.js","src/util.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","cp","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"hcluster","Kmeans","kmeans","./hcluster","./kmeans",2,"euclidean","v1","v2","total","Math","pow","sqrt","manhattan","abs","max",3,"distances","HierarchicalClustering","distance","linkage","threshold","undefined","Infinity","prototype","cluster","items","snapshotPeriod","snapshotCb","clusters","dists","mins","index","value","key","size","j","dist","merged","mergeClosest","forEach","minKey","min","c1","c2","left","right","splice","ci","key1","key2","snapshot","snapshotCallback","./distance",4,"KMeans","centroids","randomCentroids","points","k","slice","sort","round","random","classify","point","ceil","assignment","Array","iterations","movement","assigned","push","centroid","newCentroid","sum","toJSON","JSON","stringify","fromJSON","json","parse","vectors",5,"AGGREGATE","RAW","STACKED","INDEX","X","Y","ROW","COL","SIZE","SHAPE","COLOR","TEXT","DETAIL","N","O","Q","T",6,"specs","opt","table","clusterTrees","clusterfck","e1","e2","s1","vl","Encoding","shorthand","s2","consts","CLUSTER_THRESHOLD","map","tree","util","traverse","spec1","spec2","_info","score","filter","cluster1","cluster2","../util","./clusterconsts",7,"reduceTupleToTable","x","b","d","c","SWAPPABLE","DIST_MISSING","DIST_BY_ENCTYPE","reduce",8,"len","extendedSpecs","extendSpecWithEncTypeByColumnName","shorthands","diff","sj","si","get","extendedSpec1","extendedSpec2","cols","union","keys","encTypeByField","col","encType","isStack1","isStack","isStack2","encoding","color","name","spec","_encTypeByField","duplicate","marktype",9,"gen","rank","projections","type","properties","omitDotPlot","default","description","maxCardinalityForAutoAddOrdinal","alwaysAddHistogram","aggregates","config","data","tableTypes","enum","genDimQ","minCardinalityForBin","omitMeasureOnly","omitDimensionOnly","addCountForDimensionOnly","aggrList","timeUnitList","consistentAutoQ","encodings","marktypeList","encodingTypeList","maxGoodCardinalityForFacets","maxCardinalityForFacets","maxGoodCardinalityForColor","maxCardinalityForColor","maxCardinalityForShape","omitTranpose","omitDotPlotWithExtraEncoding","omitMultipleRetinalEncodings","omitNonTextAggrWithAllDimsOnFacets","omitOneDimensionCount","omitSizeOnBar","omitStackedAverage","alwaysGenerateTableAsHeatmap",10,"auto","./cluster/cluster","./consts","./gen/gen","./rank/rank","./util",11,"genAggregates","output","fieldDefs","stats","emit","fieldSet","encDef","checkAndPush","hasMeasure","hasDimension","hasRaw","tf","isDimension","aggregate","count","pop","assignAggrQ","hasAggr","autoMode","canHaveAggr","cantHaveAggr","assignField","assignBinQ","bin","assignQ","_aggregate","_raw","_bin","AUTO","isin","hasNorO","highCardinality","cardinality","isAuto","genBin","genCast","assignTimeUnitT","timeUnit","assignT","_timeUnit","schema","extend","any","isTypes","../consts",12,"retinalEncRules","fieldDef","shape","colorRules","isMeasure","shapeRules","dimMeaTransposeRule","y","generalRules","text","genMarkTypes","satisfyRules","geo","arc","row","genEncodings","isAggrWithAllDimOnFacets","isDimX","isDimY","enc","isAggregate","tmpEncoding","isDim","rules","dimension","measure","multiple","detail","hasOtherO","field","../globals","./marktypes",13,"marktypes","charts","flat","getOpt","fieldSets","genAggr","level","encs","nestedReduce","nestedMap","./aggregates","./encodings","./projections","./specs",14,"getMarktypes","markType","vlmarktypes","facetRule","facetsRule","pointRule","xIsDim","yIsDim","tickRule","isOrdinalScale","barRule","aggEitherXorY","eitherXorYisDimOrNull","lineRule","areaRule","textRule","marksRule","rule","bar","line","area","tick","mark","compiler","marks","reqs","requiredEncoding","support","supportedEncoding",15,"selected","fieldsToAdd","hasSelectedDimension","hasSelectedMeasure","indices","isCount","compareFieldsToAdd","setsToAdd","chooseKorLess","setToAdd","concat","typeIsMeasureScore","projection","join",16,"genSpecsFromFieldDefs","nested","dict","genSpecsFromEncodings","list","finalTouch","stat","stdev","mean","scale","zero","../rank/rank",17,"CHART_TYPES","TABLE","BAR","PLOT","LINE","AREA","MAP","HISTOGRAM","ANY_DATA_TYPES","vega-lite/src/globals",18,"./rankEncodings",19,"rankEncodings","features","encTypes","encodingMappingByField","mappings","reasons","m","assign","scores","role","reason","apply","UNUSED_POSITION","MARK_SCORE","p","circle","square","D","M","BAD","TERRIBLE","minor","pos","Y_T","facet_text","facet_good","facet_ok","facet_bad","color_good","color_ok","color_bad","color_stack","bad","terrible","dimensionScore","hasOrder","isStacked","measureScore",20,"isArray","obj","toString","sp","v","nonEmpty","grp","node","arr","Object","create","DEFAULT_OPT","powerset","ps","subset","sub","chooseK","kArray","cross"],"mappings":"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","file":"compass.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.cp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\n   hcluster: require(\"./hcluster\"),\n   Kmeans: require(\"./kmeans\"),\n   kmeans: require(\"./kmeans\").kmeans\n};\n},{\"./hcluster\":3,\"./kmeans\":4}],2:[function(require,module,exports){\nmodule.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};\n},{}],3:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n\n},{\"./distance\":2}],4:[function(require,module,exports){\nvar distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}\n},{\"./distance\":2}],5:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.AGGREGATE = 'aggregate';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.N = 'N';\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],6:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(specs, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(specs);\n\n  var clusterTrees = clusterfck.hcluster(specs, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(spec1, spec2) {\n      // sort each cluster -- have the highest score as 1st item\n      return spec2._info.score - spec1._info.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0]._info.score - cluster1[0]._info.score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":20,\"./clusterconsts\":7,\"./distance\":8,\"clusterfck\":1}],7:[function(require,module,exports){\n'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n\n},{}],8:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (specs) {\n  var len = specs.length,\n    extendedSpecs = specs.map(function(e) { return distance.extendSpecWithEncTypeByColumnName(e); }),\n    shorthands = specs.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(extendedSpecs[i], extendedSpecs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (extendedSpec1, extendedSpec2) {\n  var cols = util.union(vl.keys(extendedSpec1.encTypeByField), vl.keys(extendedSpec2.encTypeByField)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = extendedSpec1.encTypeByField[col], e2 = extendedSpec2.encTypeByField[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(extendedSpec1),\n    isStack2 = vl.Encoding.isStack(extendedSpec2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(extendedSpec1.encoding.color.name !== extendedSpec2.encoding.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.extendSpecWithEncTypeByColumnName = function(spec) {\n  var _encTypeByField = {},\n    encoding = spec.encoding;\n\n  vl.keys(encoding).forEach(function(encType) {\n    var e = vl.duplicate(encoding[encType]);\n    e.encType = encType;\n    _encTypeByField[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: spec.marktype,\n    encTypeByField: _encTypeByField,\n    encoding: spec.encoding\n  };\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../util\":20,\"./clusterconsts\":7}],9:[function(require,module,exports){\n'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'mean']\n    },\n    timeUnitList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitOneDimensionCount: {\n      type: 'boolean',\n      default: false,\n      description: 'omit one dimension count'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\n},{}],10:[function(require,module,exports){\nmodule.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n\n},{\"./cluster/cluster\":6,\"./consts\":9,\"./gen/gen\":13,\"./rank/rank\":18,\"./util\":20}],11:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null);\n\nvar consts = require('../consts');\n\nvar AUTO = '*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fieldDefs, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fieldDefs.length);\n  var hasNorO = vl.any(fieldDefs, function(f) {\n    return vl.encDef.isTypes(f, [N, O]);\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.encDef.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.encDef.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggregate) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.encDef.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggregate = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggregate;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fieldDefs[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggregate === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggregate = f.aggregate;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggregate) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggregate);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === AUTO || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [AUTO, 'bin', 'cast', 'autocast'])) && !hasNorO) {\n        var highCardinality = vl.encDef.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [AUTO, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [AUTO, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignTimeUnitT(i, hasAggr, autoMode, timeUnit) {\n    tf[i].timeUnit = timeUnit;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].timeUnit;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fieldDefs[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._timeUnits\n    if (f._timeUnit) {\n      assignTimeUnitT(i, hasAggr, autoMode, f._timeUnit);\n    } else {\n      opt.timeUnitList.forEach(function(timeUnit) {\n        if (timeUnit === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignTimeUnitT(i, hasAggr, autoMode, timeUnit);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fieldDefs.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fieldDefs[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case Q:\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case T:\n        assignT(i, hasAggr, autoMode);\n        break;\n      case O:\n        /* falls through */\n      case N:\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, AUTO);\n\n  return output;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9}],12:[function(require,module,exports){\n(function (global){\n\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.encDef.isDimension,\n  isMeasure = vl.encDef.isMeasure;\n\nmodule.exports = genEncodings;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(encoding, fieldDef, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (encoding.color || encoding.size || encoding.shape) return false;\n  }\n  return true;\n}\n\nfunction colorRules(encoding, fieldDef, stats, opt) {\n  if(!retinalEncRules(encoding, fieldDef, stats, opt)) return false;\n\n  return vl.encDef.isMeasure(fieldDef) ||\n    vl.encDef.cardinality(fieldDef, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(encoding, fieldDef, stats, opt) {\n  if(!retinalEncRules(encoding, fieldDef, stats, opt)) return false;\n\n  if (fieldDef.bin && fieldDef.type === Q) return false;\n  if (fieldDef.timeUnit && fieldDef.type === T) return false;\n  return vl.encDef.cardinality(fieldDef, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(encoding) {\n  // create horizontal histogram for ordinal\n  if (vl.encDef.isTypes(encoding.y, [N, O]) && isMeasure(encoding.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(encoding.y) && (!vl.encDef.isTypes(encoding.x, [N, O]) && isDimension(encoding.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(encoding, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (encoding.text) {\n    return genMarkTypes.satisfyRules(encoding, TEXT, stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (encoding.x || encoding.y || encoding.geo || encoding.arc) {\n\n    if (encoding.row || encoding.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!encoding.x || !encoding.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncodings.isAggrWithAllDimOnFacets(encoding)) return false;\n      }\n    }\n\n    if (encoding.x && encoding.y) {\n      var isDimX = !!isDimension(encoding.x),\n        isDimY = !!isDimension(encoding.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(encoding)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(encoding)) return false;\n        } else if (encoding.y.type===T || encoding.x.type === T) {\n          if (encoding.y.type===T && encoding.x.type !== T) return false;\n        } else { // show only one OxO, QxQ\n          if (encoding.x.name > encoding.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && encoding.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(encoding).length > 1) return false;\n\n    if (opt.omitOneDimensionCount) {\n      // one dimension \"count\"\n      if (encoding.x && encoding.x.aggregate == 'count' && !encoding.y) return false;\n      if (encoding.y && encoding.y.aggregate == 'count' && !encoding.x) return false;\n    }\n\n    return true;\n  }\n  return false;\n}\n\ngenEncodings.isAggrWithAllDimOnFacets = function (encoding) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in encoding) {\n    var field = encoding[encType];\n    if (field.aggregate) {\n      hasAggr = true;\n    }\n    if (vl.encDef.isDimension(field) && (encType !== ROW && encType !== COL)) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncodings(encodings, fieldDefs, stats, opt) {\n  // generate a collection vega-lite's enc\n  var tmpEncoding = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fieldDefs.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEncoding, stats, opt)) {\n        encodings.push(vl.duplicate(tmpEncoding));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var fieldDef = fieldDefs[i];\n    for (var j in opt.encodingTypeList) {\n      var encType = opt.encodingTypeList[j],\n        isDim = isDimension(fieldDef);\n\n      //TODO: support \"multiple\" assignment\n      if (!(encType in tmpEncoding) && // encoding not used\n        ((isDim && rules[encType].dimension) || (!isDim && rules[encType].measure)) &&\n        (!rules[encType].rules || rules[encType].rules(tmpEncoding, fieldDef, stats, opt))\n      ) {\n        tmpEncoding[encType] = fieldDef;\n        assignField(i + 1);\n        delete tmpEncoding[encType];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encodings;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../globals\":17,\"./marktypes\":14}],13:[function(require,module,exports){\n'use strict';\n\nvar util = require('../util');\n\n/**\n * Module for generating visualizations\n */\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variations\n  specs: require('./specs'),\n  encodings: require('./encodings'),\n  marktypes: require('./marktypes')\n};\n\n\n// TODO(kanitw): revise if this is still working\ngen.charts = function(fieldDefs, opt, config, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fieldDefs, opt) : [fieldDefs],\n    encodings, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggregate)) {\n    encodings = fieldSets.reduce(function(output, fieldDefs) {\n      return gen.encs(output, fieldDefs, opt);\n    }, []);\n  } else {\n    encodings = fieldSets.map(function(fieldDefs) {\n      return gen.encs([], fieldDefs, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encodings, function(output, encoding) {\n      return gen.marktypes(output, encoding, opt, config);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encodings, function(encoding) {\n      return gen.marktypes([], encoding, opt, config);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};\n},{\"../util\":20,\"./aggregates\":11,\"./encodings\":12,\"./marktypes\":14,\"./projections\":15,\"./specs\":16}],14:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.encDef.isDimension,\n  isOrdinalScale = vl.encDef.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(encoding, stats, opt) {\n  return opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(encoding, markType, stats, opt);\n  });\n}\n\nvlmarktypes.satisfyRules = function (encoding, markType, stats, opt) {\n  var mark = vl.compiler.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in encoding)) return false;\n  }\n\n  for (var encType in encoding) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](encoding, stats, opt);\n};\n\nfunction facetRule(fieldDef, stats, opt) {\n  return vl.encDef.cardinality(fieldDef, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(encoding, stats, opt) {\n  if(encoding.row && !facetRule(encoding.row, stats, opt)) return false;\n  if(encoding.col && !facetRule(encoding.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n  if (encoding.x && encoding.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(encoding.x),\n      yIsDim = isDimension(encoding.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (encoding.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (encoding.color && isDimension(encoding.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && encoding.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(encoding).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (encoding.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(encoding, stats, opt) {\n  // jshint unused:false\n  if (encoding.x || encoding.y) {\n    if(vl.enc.isAggregate(encoding)) return false;\n\n    var xIsDim = isDimension(encoding.x),\n      yIsDim = isDimension(encoding.y);\n\n    return (!xIsDim && (!encoding.y || isOrdinalScale(encoding.y))) ||\n      (!yIsDim && (!encoding.x || isOrdinalScale(encoding.x)));\n  }\n  return false;\n}\n\nfunction barRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n\n  // bar requires at least x or y\n  if (!encoding.x && !encoding.y) return false;\n\n  if (opt.omitSizeOnBar && encoding.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  // need to aggregate on either x or y\n  var aggEitherXorY =\n    (!encoding.x || encoding.x.aggregate === undefined) ^\n    (!encoding.y || encoding.y.aggregate === undefined);\n\n\n  if (aggEitherXorY) {\n    var eitherXorYisDimOrNull =\n      (!encoding.x || isDimension(encoding.x)) ^\n      (!encoding.y || isDimension(encoding.y));\n\n    if (eitherXorYisDimOrNull) {\n      var aggregate = encoding.x.aggregate || encoding.y.aggregate;\n      return !(opt.omitStackedAverage && aggregate ==='mean' && encoding.color);\n    }\n  }\n\n  return false;\n}\n\nfunction lineRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return encoding.x.type == 'T' && encoding.x.timeUnit && encoding.y.type == 'Q' && encoding.y.aggregate;\n}\n\nfunction areaRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n\n  if(!lineRule(encoding, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && encoding.y.aggregate ==='mean' && encoding.color);\n}\n\nfunction textRule(encoding, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (encoding.row || encoding.col) && encoding.text && encoding.text.aggregate && !encoding.x && !encoding.y && !encoding.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !encoding.color);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],15:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.encDef.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fieldDefs array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fieldDefs, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fieldDefs.forEach(function(fieldDef, index){\n    //save indices for stable sort later\n    indices[fieldDef.name] = index;\n\n    if (fieldDef.selected) {\n      selected.push(fieldDef);\n      if (isDimension(fieldDef) || fieldDef.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (fieldDef.selected !== false && !vl.encDef.isCount(fieldDef)) {\n      if (vl.encDef.isDimension(fieldDef) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.encDef.cardinality(fieldDef, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(fieldDef);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  N: 0,\n  O: 0,\n  T: 2,\n  Q: 3\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else { //if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.encDef.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9,\"../util\":20}],16:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  genEncodings = require('./encodings'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genSpecsFromFieldDefs;\n\n/** Design Encodings for a set of field definition */\n\nfunction genSpecsFromFieldDefs(output, fieldDefs, stats, opt, nested) {\n  // opt must be augmented before being passed to genEncodings or getMarktypes\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encodings = genEncodings([], fieldDefs, stats, opt);\n\n  if (nested) {\n    return encodings.reduce(function(dict, encoding) {\n      dict[encoding] = genSpecsFromEncodings([], encoding, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encodings.reduce(function(list, encoding) {\n      return genSpecsFromEncodings(list, encoding, stats, opt);\n    }, []);\n  }\n}\n\nfunction genSpecsFromEncodings(output, encoding, stats, opt) {\n  getMarktypes(encoding, stats, opt)\n    .forEach(function(markType) {\n      var spec = vl.duplicate({\n          // Clone config & encoding to unique objects\n          encoding: encoding,\n          config: opt.config\n        });\n\n      spec.marktype = markType;\n      // Data object is the same across charts: pass by reference\n      spec.data = opt.data;\n\n      spec = finalTouch(spec, stats, opt);\n      var score = rank.encoding(spec, stats, opt);\n\n      spec._info = score;\n      output.push(spec);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(spec, stats, opt) {\n  if (spec.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    spec.encoding.color = spec.encoding.text;\n  }\n\n  // don't include zero if stdev/mean < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var encoding = spec.encoding;\n  ['x', 'y'].forEach(function(encType) {\n    var field = encoding[encType];\n    if (field && vl.encDef.isMeasure(field) && !vl.encDef.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat && stat.stdev / stat.mean < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return spec;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../consts\":9,\"../rank/rank\":18,\"./encodings\":12,\"./marktypes\":14}],17:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar g = global || window;\n\nrequire('vega-lite/src/globals');\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"vega-lite/src/globals\":5}],18:[function(require,module,exports){\nmodule.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n\n},{\"./rankEncodings\":19}],19:[function(require,module,exports){\n(function (global){\n'use strict';\n\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.encDef.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(spec, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(spec.encoding),\n    marktype = spec.marktype,\n    encoding = spec.encoding;\n\n  var encodingMappingByField = vl.enc.reduce(spec.encoding, function(o, fieldDef, encType) {\n    var key = vl.encDef.shorthand(fieldDef);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: fieldDef});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.encDef.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.encDef.isDimension(m.field) ? 'dimension' : 'measure';\n\n        var score = rankEncodings.score[role](m.field, m.encType, spec.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === TEXT) {\n    // TODO\n  } else {\n    if (encoding.x && encoding.y) {\n      if (isDimension(encoding.x) ^ isDimension(encoding.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== TEXT) {\n    if ((!encoding.x || !encoding.y) && !encoding.geo && !encoding.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (fieldDef, encType, marktype, stats, opt){\n  var cardinality = vl.encDef.cardinality(fieldDef, stats);\n  switch (encType) {\n    case X:\n      if (vl.encDef.isTypes(fieldDef, [N, O]))  return D.pos - D.minor;\n      return D.pos;\n\n    case Y:\n      if (vl.encDef.isTypes(fieldDef, [N, O])) return D.pos - D.minor; //prefer ordinal on y\n      if (fieldDef.type === T) return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case COL:\n      if (marktype === TEXT) return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case ROW:\n      if (marktype === TEXT) return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case COLOR:\n      var hasOrder = (fieldDef.bin && fieldDef.type===Q) || (fieldDef.timeUnit && fieldDef.type===T);\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype === 'bar' || marktype === 'area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case SHAPE:\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case DETAIL:\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (fieldDef, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case X: return M.pos;\n    case Y: return M.pos;\n    case SIZE:\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === TEXT) return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case COLOR: return M.color;\n    case TEXT: return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../globals\":17}],20:[function(require,module,exports){\n\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n\n},{\"./consts\":9}]},{},[10])(10)\n});\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n","module.exports = {\n  euclidean: function(v1, v2) {\n      var total = 0;\n      for (var i = 0; i < v1.length; i++) {\n         total += Math.pow(v2[i] - v1[i], 2);      \n      }\n      return Math.sqrt(total);\n   },\n   manhattan: function(v1, v2) {\n     var total = 0;\n     for (var i = 0; i < v1.length ; i++) {\n        total += Math.abs(v2[i] - v1[i]);      \n     }\n     return total;\n   },\n   max: function(v1, v2) {\n     var max = 0;\n     for (var i = 0; i < v1.length; i++) {\n        max = Math.max(max , Math.abs(v2[i] - v1[i]));      \n     }\n     return max;\n   }\n};","var distances = require(\"./distance\");\n\nvar HierarchicalClustering = function(distance, linkage, threshold) {\n   this.distance = distance;\n   this.linkage = linkage;\n   this.threshold = threshold == undefined ? Infinity : threshold;\n}\n\nHierarchicalClustering.prototype = {\n   cluster : function(items, snapshotPeriod, snapshotCb) {\n      this.clusters = [];\n      this.dists = [];  // distances between each pair of clusters\n      this.mins = []; // closest cluster for each cluster\n      this.index = []; // keep a hash of all clusters by key\n      \n      for (var i = 0; i < items.length; i++) {\n         var cluster = {\n            value: items[i],\n            key: i,\n            index: i,\n            size: 1\n         };\n         this.clusters[i] = cluster;\n         this.index[i] = cluster;\n         this.dists[i] = [];\n         this.mins[i] = 0;\n      }\n\n      for (var i = 0; i < this.clusters.length; i++) {\n         for (var j = 0; j <= i; j++) {\n            var dist = (i == j) ? Infinity : \n               this.distance(this.clusters[i].value, this.clusters[j].value);\n            this.dists[i][j] = dist;\n            this.dists[j][i] = dist;\n\n            if (dist < this.dists[i][this.mins[i]]) {\n               this.mins[i] = j;               \n            }\n         }\n      }\n\n      var merged = this.mergeClosest();\n      var i = 0;\n      while (merged) {\n        if (snapshotCb && (i++ % snapshotPeriod) == 0) {\n           snapshotCb(this.clusters);           \n        }\n        merged = this.mergeClosest();\n      }\n    \n      this.clusters.forEach(function(cluster) {\n        // clean up metadata used for clustering\n        delete cluster.key;\n        delete cluster.index;\n      });\n\n      return this.clusters;\n   },\n  \n   mergeClosest: function() {\n      // find two closest clusters from cached mins\n      var minKey = 0, min = Infinity;\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key = this.clusters[i].key,\n             dist = this.dists[key][this.mins[key]];\n         if (dist < min) {\n            minKey = key;\n            min = dist;\n         }\n      }\n      if (min >= this.threshold) {\n         return false;         \n      }\n\n      var c1 = this.index[minKey],\n          c2 = this.index[this.mins[minKey]];\n\n      // merge two closest clusters\n      var merged = {\n         left: c1,\n         right: c2,\n         key: c1.key,\n         size: c1.size + c2.size\n      };\n\n      this.clusters[c1.index] = merged;\n      this.clusters.splice(c2.index, 1);\n      this.index[c1.key] = merged;\n\n      // update distances with new merged cluster\n      for (var i = 0; i < this.clusters.length; i++) {\n         var ci = this.clusters[i];\n         var dist;\n         if (c1.key == ci.key) {\n            dist = Infinity;            \n         }\n         else if (this.linkage == \"single\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] > this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];\n            }\n         }\n         else if (this.linkage == \"complete\") {\n            dist = this.dists[c1.key][ci.key];\n            if (this.dists[c1.key][ci.key] < this.dists[c2.key][ci.key]) {\n               dist = this.dists[c2.key][ci.key];              \n            }\n         }\n         else if (this.linkage == \"average\") {\n            dist = (this.dists[c1.key][ci.key] * c1.size\n                   + this.dists[c2.key][ci.key] * c2.size) / (c1.size + c2.size);\n         }\n         else {\n            dist = this.distance(ci.value, c1.value);            \n         }\n\n         this.dists[c1.key][ci.key] = this.dists[ci.key][c1.key] = dist;\n      }\n\n    \n      // update cached mins\n      for (var i = 0; i < this.clusters.length; i++) {\n         var key1 = this.clusters[i].key;        \n         if (this.mins[key1] == c1.key || this.mins[key1] == c2.key) {\n            var min = key1;\n            for (var j = 0; j < this.clusters.length; j++) {\n               var key2 = this.clusters[j].key;\n               if (this.dists[key1][key2] < this.dists[key1][min]) {\n                  min = key2;                  \n               }\n            }\n            this.mins[key1] = min;\n         }\n         this.clusters[i].index = i;\n      }\n    \n      // clean up metadata used for clustering\n      delete c1.key; delete c2.key;\n      delete c1.index; delete c2.index;\n\n      return true;\n   }\n}\n\nvar hcluster = function(items, distance, linkage, threshold, snapshot, snapshotCallback) {\n   distance = distance || \"euclidean\";\n   linkage = linkage || \"average\";\n\n   if (typeof distance == \"string\") {\n     distance = distances[distance];\n   }\n   var clusters = (new HierarchicalClustering(distance, linkage, threshold))\n                  .cluster(items, snapshot, snapshotCallback);\n      \n   if (threshold === undefined) {\n      return clusters[0]; // all clustered into one\n   }\n   return clusters;\n}\n\nmodule.exports = hcluster;\n","var distances = require(\"./distance\");\n\nfunction KMeans(centroids) {\n   this.centroids = centroids || [];\n}\n\nKMeans.prototype.randomCentroids = function(points, k) {\n   var centroids = points.slice(0); // copy\n   centroids.sort(function() {\n      return (Math.round(Math.random()) - 0.5);\n   });\n   return centroids.slice(0, k);\n}\n\nKMeans.prototype.classify = function(point, distance) {\n   var min = Infinity,\n       index = 0;\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   for (var i = 0; i < this.centroids.length; i++) {\n      var dist = distance(point, this.centroids[i]);\n      if (dist < min) {\n         min = dist;\n         index = i;\n      }\n   }\n\n   return index;\n}\n\nKMeans.prototype.cluster = function(points, k, distance, snapshotPeriod, snapshotCb) {\n   k = k || Math.max(2, Math.ceil(Math.sqrt(points.length / 2)));\n\n   distance = distance || \"euclidean\";\n   if (typeof distance == \"string\") {\n      distance = distances[distance];\n   }\n\n   this.centroids = this.randomCentroids(points, k);\n\n   var assignment = new Array(points.length);\n   var clusters = new Array(k);\n\n   var iterations = 0;\n   var movement = true;\n   while (movement) {\n      // update point-to-centroid assignments\n      for (var i = 0; i < points.length; i++) {\n         assignment[i] = this.classify(points[i], distance);\n      }\n\n      // update location of each centroid\n      movement = false;\n      for (var j = 0; j < k; j++) {\n         var assigned = [];\n         for (var i = 0; i < assignment.length; i++) {\n            if (assignment[i] == j) {\n               assigned.push(points[i]);\n            }\n         }\n\n         if (!assigned.length) {\n            continue;\n         }\n\n         var centroid = this.centroids[j];\n         var newCentroid = new Array(centroid.length);\n\n         for (var g = 0; g < centroid.length; g++) {\n            var sum = 0;\n            for (var i = 0; i < assigned.length; i++) {\n               sum += assigned[i][g];\n            }\n            newCentroid[g] = sum / assigned.length;\n\n            if (newCentroid[g] != centroid[g]) {\n               movement = true;\n            }\n         }\n\n         this.centroids[j] = newCentroid;\n         clusters[j] = assigned;\n      }\n\n      if (snapshotCb && (iterations++ % snapshotPeriod == 0)) {\n         snapshotCb(clusters);\n      }\n   }\n\n   return clusters;\n}\n\nKMeans.prototype.toJSON = function() {\n   return JSON.stringify(this.centroids);\n}\n\nKMeans.prototype.fromJSON = function(json) {\n   this.centroids = JSON.parse(json);\n   return this;\n}\n\nmodule.exports = KMeans;\n\nmodule.exports.kmeans = function(vectors, k) {\n   return (new KMeans()).cluster(vectors, k);\n}","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.AGGREGATE = 'aggregate';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.N = 'N';\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n","\"use strict\";\n\nmodule.exports = cluster;\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  clusterfck = require('clusterfck'),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\ncluster.distance = require('./distance');\n\nfunction cluster(specs, opt) {\n  // jshint unused:false\n  var dist = cluster.distance.table(specs);\n\n  var clusterTrees = clusterfck.hcluster(specs, function(e1, e2) {\n    var s1 = vl.Encoding.shorthand(e1),\n      s2 = vl.Encoding.shorthand(e2);\n    return dist[s1][s2];\n  }, 'average', consts.CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n      return util.traverse(tree, []);\n    })\n   .map(function(cluster) {\n    return cluster.sort(function(spec1, spec2) {\n      // sort each cluster -- have the highest score as 1st item\n      return spec2._info.score - spec1._info.score;\n    });\n  }).filter(function(cluster) {  // filter empty cluster\n    return cluster.length >0;\n  }).sort(function(cluster1, cluster2) {\n    //sort by highest scoring item in each cluster\n    return cluster2[0]._info.score - cluster1[0]._info.score;\n  });\n\n  clusters.dist = dist; //append dist in the array for debugging\n\n  return clusters;\n}","'use strict';\n\nvar c = module.exports = {};\n\nc.SWAPPABLE = 0.05;\nc.DIST_MISSING = 1;\nc.CLUSTER_THRESHOLD = 1;\n\nfunction reduceTupleToTable(r, x) {\n  var a = x[0], b = x[1], d = x[2];\n  r[a] = r[a] || {};\n  r[b] = r[b] || {};\n  r[a][b] = r[b][a] = d;\n  return r;\n}\n\nc.DIST_BY_ENCTYPE = [\n  // positional\n  ['x', 'y', c.SWAPPABLE],\n  ['row', 'col', c.SWAPPABLE],\n\n  // ordinal mark properties\n  ['color', 'shape', c.SWAPPABLE],\n  ['color', 'detail', c.SWAPPABLE],\n  ['detail', 'shape', c.SWAPPABLE],\n\n  // quantitative mark properties\n  ['size', 'color', c.SWAPPABLE]\n].reduce(reduceTupleToTable, {});\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  consts = require('./clusterconsts'),\n  util = require('../util');\n\nvar distance = {};\nmodule.exports = distance;\n\ndistance.table = function (specs) {\n  var len = specs.length,\n    extendedSpecs = specs.map(function(e) { return distance.extendSpecWithEncTypeByColumnName(e); }),\n    shorthands = specs.map(vl.Encoding.shorthand),\n    diff = {}, i, j;\n\n  for (i = 0; i < len; i++) diff[shorthands[i]] = {};\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      var sj = shorthands[j], si = shorthands[i];\n\n      diff[sj][si] = diff[si][sj] = distance.get(extendedSpecs[i], extendedSpecs[j]);\n    }\n  }\n  return diff;\n};\n\ndistance.get = function (extendedSpec1, extendedSpec2) {\n  var cols = util.union(vl.keys(extendedSpec1.encTypeByField), vl.keys(extendedSpec2.encTypeByField)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = extendedSpec1.encTypeByField[col], e2 = extendedSpec2.encTypeByField[col];\n\n    if (e1 && e2) {\n      if (e1.encType != e2.encType) {\n        dist += (consts.DIST_BY_ENCTYPE[e1.encType] || {})[e2.encType] || 1;\n      }\n    } else {\n      dist += consts.DIST_MISSING;\n    }\n  });\n\n  // do not group stacked chart with similar non-stacked chart!\n  var isStack1 = vl.Encoding.isStack(extendedSpec1),\n    isStack2 = vl.Encoding.isStack(extendedSpec2);\n\n  if(isStack1 || isStack2) {\n    if(isStack1 && isStack2) {\n      if(extendedSpec1.encoding.color.name !== extendedSpec2.encoding.color.name) {\n        dist+=1;\n      }\n    } else {\n      dist+=1; // surely different\n    }\n  }\n  return dist;\n};\n\n// get encoding type by fieldname\ndistance.extendSpecWithEncTypeByColumnName = function(spec) {\n  var _encTypeByField = {},\n    encoding = spec.encoding;\n\n  vl.keys(encoding).forEach(function(encType) {\n    var e = vl.duplicate(encoding[encType]);\n    e.encType = encType;\n    _encTypeByField[e.name || ''] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: spec.marktype,\n    encTypeByField: _encTypeByField,\n    encoding: spec.encoding\n  };\n};","'use strict';\n\nvar consts = module.exports = {\n  gen: {},\n  cluster: {},\n  rank: {}\n};\n\nconsts.gen.projections = {\n  type: 'object',\n  properties: {\n    omitDotPlot: { //FIXME remove this!\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    maxCardinalityForAutoAddOrdinal: {\n      type: 'integer',\n      default: 50,\n      description: 'max cardinality for ordinal field to be considered for auto adding'\n    },\n    alwaysAddHistogram: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nconsts.gen.aggregates = {\n  type: 'object',\n  properties: {\n    config: {\n      type: 'object'\n    },\n    data: {\n      type: 'object'\n    },\n    tableTypes: {\n      type: 'boolean',\n      default: 'both',\n      enum: ['both', 'aggregated', 'disaggregated']\n    },\n    genDimQ: {\n      type: 'string',\n      default: 'auto',\n      enum: ['auto', 'bin', 'cast', 'none'],\n      description: 'Use Q as Dimension either by binning or casting'\n    },\n    minCardinalityForBin: {\n      type: 'integer',\n      default: 20,\n      description: 'minimum cardinality of a field if we were to bin'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitMeasureOnly: {\n      type: 'boolean',\n      default: false,\n      description: 'Omit aggregation with measure(s) only'\n    },\n    omitDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Omit aggregation with dimension(s) only'\n    },\n    addCountForDimensionOnly: {\n      type: 'boolean',\n      default: true,\n      description: 'Add count when there are dimension(s) only'\n    },\n    aggrList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: [undefined, 'mean']\n    },\n    timeUnitList: {\n      type: 'array',\n      items: {\n        type: ['string']\n      },\n      default: ['year']\n    },\n    consistentAutoQ: {\n      type: 'boolean',\n      default: true,\n      description: \"generate similar auto transform for quant\"\n    }\n  }\n};\n\nconsts.gen.encodings = {\n  type: 'object',\n  properties: {\n    marktypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['point', 'bar', 'line', 'area', 'text', 'tick'], //filled_map\n      description: 'allowed marktypes'\n    },\n    encodingTypeList: {\n      type: 'array',\n      items: {type: 'string'},\n      default: ['x', 'y', 'row', 'col', 'size', 'color', 'text', 'detail'],\n      description: 'allowed encoding types'\n    },\n    maxGoodCardinalityForFacets: {\n      type: 'integer',\n      default: 5,\n      description: 'maximum cardinality of a field to be put on facet (row/col) effectively'\n    },\n    maxCardinalityForFacets: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of a field to be put on facet (row/col)'\n    },\n    maxGoodCardinalityForColor: {\n      type: 'integer',\n      default: 7,\n      description: 'maximum cardinality of an ordinal field to be put on color effectively'\n    },\n    maxCardinalityForColor: {\n      type: 'integer',\n      default: 20,\n      description: 'maximum cardinality of an ordinal field to be put on color'\n    },\n    maxCardinalityForShape: {\n      type: 'integer',\n      default: 6,\n      description: 'maximum cardinality of an ordinal field to be put on shape'\n    },\n    omitTranpose:  {\n      type: 'boolean',\n      default: true,\n      description: 'Eliminate all transpose by (1) keeping horizontal dot plot only (2) for OxQ charts, always put O on Y (3) show only one DxD, MxM (currently sorted by name)'\n    },\n    omitDotPlot: {\n      type: 'boolean',\n      default: false,\n      description: 'remove all dot plots'\n    },\n    omitDotPlotWithExtraEncoding: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all dot plots with >1 encoding'\n    },\n    omitMultipleRetinalEncodings: {\n      type: 'boolean',\n      default: true,\n      description: 'omit using multiple retinal variables (size, color, shape)'\n    },\n    omitNonTextAggrWithAllDimsOnFacets: {\n      type: 'boolean',\n      default: true,\n      description: 'remove all aggregated charts (except text tables) with all dims on facets (row, col)'\n    },\n    omitOneDimensionCount: {\n      type: 'boolean',\n      default: false,\n      description: 'omit one dimension count'\n    },\n    omitSizeOnBar: {\n      type: 'boolean',\n      default: false,\n      description: 'do not use bar\\'s size'\n    },\n    omitStackedAverage: {\n      type: 'boolean',\n      default: true,\n      description: 'do not stack bar chart with average'\n    },\n    alwaysGenerateTableAsHeatmap: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n","module.exports = {\n  consts: require('./consts'),\n  cluster: require('./cluster/cluster'),\n  gen: require('./gen/gen'),\n  rank: require('./rank/rank'),\n  util: require('./util'),\n  auto: \"-, sum\"\n};\n\n\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null);\n\nvar consts = require('../consts');\n\nvar AUTO = '*';\n\nmodule.exports = genAggregates;\n\nfunction genAggregates(output, fieldDefs, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.aggregates);\n  var tf = new Array(fieldDefs.length);\n  var hasNorO = vl.any(fieldDefs, function(f) {\n    return vl.encDef.isTypes(f, [N, O]);\n  });\n\n  function emit(fieldSet) {\n    fieldSet = vl.duplicate(fieldSet);\n    fieldSet.key = vl.encDef.shorthands(fieldSet);\n    output.push(fieldSet);\n  }\n\n  function checkAndPush() {\n    if (opt.omitMeasureOnly || opt.omitDimensionOnly) {\n      var hasMeasure = false, hasDimension = false, hasRaw = false;\n      tf.forEach(function(f) {\n        if (vl.encDef.isDimension(f)) {\n          hasDimension = true;\n        } else {\n          hasMeasure = true;\n          if (!f.aggregate) hasRaw = true;\n        }\n      });\n      if (!hasDimension && !hasRaw && opt.omitMeasureOnly) return;\n      if (!hasMeasure) {\n        if (opt.addCountForDimensionOnly) {\n          tf.push(vl.encDef.count());\n          emit(tf);\n          tf.pop();\n        }\n        if (opt.omitDimensionOnly) return;\n      }\n    }\n    if (opt.omitDotPlot && tf.length === 1) return;\n    emit(tf);\n  }\n\n  function assignAggrQ(i, hasAggr, autoMode, a) {\n    var canHaveAggr = hasAggr === true || hasAggr === null,\n      cantHaveAggr = hasAggr === false || hasAggr === null;\n    if (a) {\n      if (canHaveAggr) {\n        tf[i].aggregate = a;\n        assignField(i + 1, true, autoMode);\n        delete tf[i].aggregate;\n      }\n    } else { // if(a === undefined)\n      if (cantHaveAggr) {\n        assignField(i + 1, false, autoMode);\n      }\n    }\n  }\n\n  function assignBinQ(i, hasAggr, autoMode) {\n    tf[i].bin = true;\n    assignField(i + 1, hasAggr, autoMode);\n    delete tf[i].bin;\n  }\n\n  function assignQ(i, hasAggr, autoMode) {\n    var f = fieldDefs[i],\n      canHaveAggr = hasAggr === true || hasAggr === null;\n\n    tf[i] = {name: f.name, type: f.type};\n\n    if (f.aggregate === 'count') { // if count is included in the selected fields\n      if (canHaveAggr) {\n        tf[i].aggregate = f.aggregate;\n        assignField(i + 1, true, autoMode);\n      }\n    } else if (f._aggregate) {\n      // TODO support array of f._aggrs too\n      assignAggrQ(i, hasAggr, autoMode, f._aggregate);\n    } else if (f._raw) {\n      assignAggrQ(i, hasAggr, autoMode, undefined);\n    } else if (f._bin) {\n      assignBinQ(i, hasAggr, autoMode);\n    } else {\n      opt.aggrList.forEach(function(a) {\n        if (!opt.consistentAutoQ || autoMode === AUTO || autoMode === a) {\n          assignAggrQ(i, hasAggr, a /*assign autoMode*/, a);\n        }\n      });\n\n      if ((!opt.consistentAutoQ || vl.isin(autoMode, [AUTO, 'bin', 'cast', 'autocast'])) && !hasNorO) {\n        var highCardinality = vl.encDef.cardinality(f, stats) > opt.minCardinalityForBin;\n\n        var isAuto = opt.genDimQ === 'auto',\n          genBin = opt.genDimQ  === 'bin' || (isAuto && highCardinality),\n          genCast = opt.genDimQ === 'cast' || (isAuto && !highCardinality);\n\n        if (genBin && vl.isin(autoMode, [AUTO, 'bin', 'autocast'])) {\n          assignBinQ(i, hasAggr, isAuto ? 'autocast' : 'bin');\n        }\n        if (genCast && vl.isin(autoMode, [AUTO, 'cast', 'autocast'])) {\n          tf[i].type = 'O';\n          assignField(i + 1, hasAggr, isAuto ? 'autocast' : 'cast');\n          tf[i].type = 'Q';\n        }\n      }\n    }\n  }\n\n  function assignTimeUnitT(i, hasAggr, autoMode, timeUnit) {\n    tf[i].timeUnit = timeUnit;\n    assignField(i+1, hasAggr, autoMode);\n    delete tf[i].timeUnit;\n  }\n\n  function assignT(i, hasAggr, autoMode) {\n    var f = fieldDefs[i];\n    tf[i] = {name: f.name, type: f.type};\n\n    // TODO support array of f._timeUnits\n    if (f._timeUnit) {\n      assignTimeUnitT(i, hasAggr, autoMode, f._timeUnit);\n    } else {\n      opt.timeUnitList.forEach(function(timeUnit) {\n        if (timeUnit === undefined) {\n          if (!hasAggr) { // can't aggregate over raw time\n            assignField(i+1, false, autoMode);\n          }\n        } else {\n          assignTimeUnitT(i, hasAggr, autoMode, timeUnit);\n        }\n      });\n    }\n\n    // FIXME what if you aggregate time?\n  }\n\n  function assignField(i, hasAggr, autoMode) {\n    if (i === fieldDefs.length) { // If all fields are assigned\n      checkAndPush();\n      return;\n    }\n\n    var f = fieldDefs[i];\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case Q:\n        assignQ(i, hasAggr, autoMode);\n        break;\n\n      case T:\n        assignT(i, hasAggr, autoMode);\n        break;\n      case O:\n        /* falls through */\n      case N:\n        /* falls through */\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr, autoMode);\n        break;\n    }\n  }\n\n  var hasAggr = opt.tableTypes === 'aggregated' ? true : opt.tableTypes === 'disaggregated' ? false : null;\n  assignField(0, hasAggr, AUTO);\n\n  return output;\n}\n","\"use strict\";\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  genMarkTypes = require('./marktypes'),\n  isDimension = vl.encDef.isDimension,\n  isMeasure = vl.encDef.isMeasure;\n\nmodule.exports = genEncodings;\n\n// FIXME remove dimension, measure and use information in vega-lite instead!\nvar rules = {\n  x: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dimension: true,\n    measure: true,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dimension: true,\n    multiple: true\n  },\n  col: {\n    dimension: true,\n    multiple: true\n  },\n  shape: {\n    dimension: true,\n    rules: shapeRules\n  },\n  size: {\n    measure: true,\n    rules: retinalEncRules\n  },\n  color: {\n    dimension: true,\n    measure: true,\n    rules: colorRules\n  },\n  text: {\n    measure: true\n  },\n  detail: {\n    dimension: true\n  }\n  //geo: {\n  //  geo: true\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\nfunction retinalEncRules(encoding, fieldDef, stats, opt) {\n  if (opt.omitMultipleRetinalEncodings) {\n    if (encoding.color || encoding.size || encoding.shape) return false;\n  }\n  return true;\n}\n\nfunction colorRules(encoding, fieldDef, stats, opt) {\n  if(!retinalEncRules(encoding, fieldDef, stats, opt)) return false;\n\n  return vl.encDef.isMeasure(fieldDef) ||\n    vl.encDef.cardinality(fieldDef, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction shapeRules(encoding, fieldDef, stats, opt) {\n  if(!retinalEncRules(encoding, fieldDef, stats, opt)) return false;\n\n  if (fieldDef.bin && fieldDef.type === Q) return false;\n  if (fieldDef.timeUnit && fieldDef.type === T) return false;\n  return vl.encDef.cardinality(fieldDef, stats) <= opt.maxCardinalityForColor;\n}\n\nfunction dimMeaTransposeRule(encoding) {\n  // create horizontal histogram for ordinal\n  if (vl.encDef.isTypes(encoding.y, [N, O]) && isMeasure(encoding.x)) return true;\n\n  // vertical histogram for Q and T\n  if (isMeasure(encoding.y) && (!vl.encDef.isTypes(encoding.x, [N, O]) && isDimension(encoding.x))) return true;\n\n  return false;\n}\n\nfunction generalRules(encoding, stats, opt) {\n  // enc.text is only used for TEXT TABLE\n  if (encoding.text) {\n    return genMarkTypes.satisfyRules(encoding, TEXT, stats, opt);\n  }\n\n  // CARTESIAN PLOT OR MAP\n  if (encoding.x || encoding.y || encoding.geo || encoding.arc) {\n\n    if (encoding.row || encoding.col) { //have facet(s)\n\n      // don't use facets before filling up x,y\n      if (!encoding.x || !encoding.y) return false;\n\n      if (opt.omitNonTextAggrWithAllDimsOnFacets) {\n        // remove all aggregated charts with all dims on facets (row, col)\n        if (genEncodings.isAggrWithAllDimOnFacets(encoding)) return false;\n      }\n    }\n\n    if (encoding.x && encoding.y) {\n      var isDimX = !!isDimension(encoding.x),\n        isDimY = !!isDimension(encoding.y);\n\n      if (isDimX && isDimY && !vl.enc.isAggregate(encoding)) {\n        // FIXME actually check if there would be occlusion #90\n        return false;\n      }\n\n      if (opt.omitTranpose) {\n        if (isDimX ^ isDimY) { // dim x mea\n          if (!dimMeaTransposeRule(encoding)) return false;\n        } else if (encoding.y.type===T || encoding.x.type === T) {\n          if (encoding.y.type===T && encoding.x.type !== T) return false;\n        } else { // show only one OxO, QxQ\n          if (encoding.x.name > encoding.y.name) return false;\n        }\n      }\n      return true;\n    }\n\n    // DOT PLOTS\n    // // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && encoding.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(encoding).length > 1) return false;\n\n    if (opt.omitOneDimensionCount) {\n      // one dimension \"count\"\n      if (encoding.x && encoding.x.aggregate == 'count' && !encoding.y) return false;\n      if (encoding.y && encoding.y.aggregate == 'count' && !encoding.x) return false;\n    }\n\n    return true;\n  }\n  return false;\n}\n\ngenEncodings.isAggrWithAllDimOnFacets = function (encoding) {\n  var hasAggr = false, hasOtherO = false;\n  for (var encType in encoding) {\n    var field = encoding[encType];\n    if (field.aggregate) {\n      hasAggr = true;\n    }\n    if (vl.encDef.isDimension(field) && (encType !== ROW && encType !== COL)) {\n      hasOtherO = true;\n    }\n    if (hasAggr && hasOtherO) break;\n  }\n\n  return hasAggr && !hasOtherO;\n};\n\n\nfunction genEncodings(encodings, fieldDefs, stats, opt) {\n  // generate a collection vega-lite's enc\n  var tmpEncoding = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fieldDefs.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (generalRules(tmpEncoding, stats, opt)) {\n        encodings.push(vl.duplicate(tmpEncoding));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var fieldDef = fieldDefs[i];\n    for (var j in opt.encodingTypeList) {\n      var encType = opt.encodingTypeList[j],\n        isDim = isDimension(fieldDef);\n\n      //TODO: support \"multiple\" assignment\n      if (!(encType in tmpEncoding) && // encoding not used\n        ((isDim && rules[encType].dimension) || (!isDim && rules[encType].measure)) &&\n        (!rules[encType].rules || rules[encType].rules(tmpEncoding, fieldDef, stats, opt))\n      ) {\n        tmpEncoding[encType] = fieldDef;\n        assignField(i + 1);\n        delete tmpEncoding[encType];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encodings;\n}\n","'use strict';\n\nvar util = require('../util');\n\n/**\n * Module for generating visualizations\n */\n\nvar gen = module.exports = {\n  // data variations\n  aggregates: require('./aggregates'),\n  projections: require('./projections'),\n  // encodings / visual variations\n  specs: require('./specs'),\n  encodings: require('./encodings'),\n  marktypes: require('./marktypes')\n};\n\n\n// TODO(kanitw): revise if this is still working\ngen.charts = function(fieldDefs, opt, config, flat) {\n  opt = util.gen.getOpt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? gen.aggregates([], fieldDefs, opt) : [fieldDefs],\n    encodings, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggregate)) {\n    encodings = fieldSets.reduce(function(output, fieldDefs) {\n      return gen.encs(output, fieldDefs, opt);\n    }, []);\n  } else {\n    encodings = fieldSets.map(function(fieldDefs) {\n      return gen.encs([], fieldDefs, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = util.nestedReduce(encodings, function(output, encoding) {\n      return gen.marktypes(output, encoding, opt, config);\n    }, level, true);\n  } else {\n    charts = util.nestedMap(encodings, function(encoding) {\n      return gen.marktypes([], encoding, opt, config);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};","\"use strict\";\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.encDef.isDimension,\n  isOrdinalScale = vl.encDef.isOrdinalScale;\n\nvar vlmarktypes = module.exports = getMarktypes;\n\nvar marksRule = vlmarktypes.rule = {\n  point:  pointRule,\n  bar:    barRule,\n  line:   lineRule,\n  area:   areaRule, // area is similar to line\n  text:   textRule,\n  tick:   tickRule\n};\n\nfunction getMarktypes(encoding, stats, opt) {\n  return opt.marktypeList.filter(function(markType){\n    return vlmarktypes.satisfyRules(encoding, markType, stats, opt);\n  });\n}\n\nvlmarktypes.satisfyRules = function (encoding, markType, stats, opt) {\n  var mark = vl.compiler.marks[markType],\n    reqs = mark.requiredEncoding,\n    support = mark.supportedEncoding;\n\n  for (var i in reqs) { // all required encodings in enc\n    if (!(reqs[i] in encoding)) return false;\n  }\n\n  for (var encType in encoding) { // all encodings in enc are supported\n    if (!support[encType]) return false;\n  }\n\n  return !marksRule[markType] || marksRule[markType](encoding, stats, opt);\n};\n\nfunction facetRule(fieldDef, stats, opt) {\n  return vl.encDef.cardinality(fieldDef, stats) <= opt.maxCardinalityForFacets;\n}\n\nfunction facetsRule(encoding, stats, opt) {\n  if(encoding.row && !facetRule(encoding.row, stats, opt)) return false;\n  if(encoding.col && !facetRule(encoding.col, stats, opt)) return false;\n  return true;\n}\n\nfunction pointRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n  if (encoding.x && encoding.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    var xIsDim = isDimension(encoding.x),\n      yIsDim = isDimension(encoding.y);\n\n    // For OxO\n    if (xIsDim && yIsDim) {\n      // shape doesn't work with both x, y as ordinal\n      if (encoding.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (encoding.color && isDimension(encoding.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    if (opt.omitDotPlot) return false;\n\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && encoding.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(encoding).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (encoding.shape) return false;\n  }\n  return true;\n}\n\nfunction tickRule(encoding, stats, opt) {\n  // jshint unused:false\n  if (encoding.x || encoding.y) {\n    if(vl.enc.isAggregate(encoding)) return false;\n\n    var xIsDim = isDimension(encoding.x),\n      yIsDim = isDimension(encoding.y);\n\n    return (!xIsDim && (!encoding.y || isOrdinalScale(encoding.y))) ||\n      (!yIsDim && (!encoding.x || isOrdinalScale(encoding.x)));\n  }\n  return false;\n}\n\nfunction barRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n\n  // bar requires at least x or y\n  if (!encoding.x && !encoding.y) return false;\n\n  if (opt.omitSizeOnBar && encoding.size !== undefined) return false;\n\n  // FIXME actually check if there would be occlusion #90\n  // need to aggregate on either x or y\n  var aggEitherXorY =\n    (!encoding.x || encoding.x.aggregate === undefined) ^\n    (!encoding.y || encoding.y.aggregate === undefined);\n\n\n  if (aggEitherXorY) {\n    var eitherXorYisDimOrNull =\n      (!encoding.x || isDimension(encoding.x)) ^\n      (!encoding.y || isDimension(encoding.y));\n\n    if (eitherXorYisDimOrNull) {\n      var aggregate = encoding.x.aggregate || encoding.y.aggregate;\n      return !(opt.omitStackedAverage && aggregate ==='mean' && encoding.color);\n    }\n  }\n\n  return false;\n}\n\nfunction lineRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // FIXME truly ordinal data is fine here too.\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return encoding.x.type == 'T' && encoding.x.timeUnit && encoding.y.type == 'Q' && encoding.y.aggregate;\n}\n\nfunction areaRule(encoding, stats, opt) {\n  if(!facetsRule(encoding, stats, opt)) return false;\n\n  if(!lineRule(encoding, stats, opt)) return false;\n\n  return !(opt.omitStackedAverage && encoding.y.aggregate ==='mean' && encoding.color);\n}\n\nfunction textRule(encoding, stats, opt) {\n  // at least must have row or col and aggregated text values\n  return (encoding.row || encoding.col) && encoding.text && encoding.text.aggregate && !encoding.x && !encoding.y && !encoding.size &&\n    (!opt.alwaysGenerateTableAsHeatmap || !encoding.color);\n}\n","'use strict';\n\nvar util = require('../util'),\n  consts = require('../consts'),\n  vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.encDef.isDimension;\n\nmodule.exports = projections;\n\n// TODO support other mode of projections generation\n// powerset, chooseK, chooseKorLess are already included in the util\n\n/**\n * fields\n * @param  {[type]} fieldDefs array of fields and query information\n * @return {[type]}        [description]\n */\nfunction projections(fieldDefs, stats, opt) {\n  opt = vl.schema.util.extend(opt||{}, consts.gen.projections);\n\n  // First categorize field, selected, fieldsToAdd, and save indices\n  var selected = [], fieldsToAdd = [], fieldSets = [],\n    hasSelectedDimension = false,\n    hasSelectedMeasure = false,\n    indices = {};\n\n  fieldDefs.forEach(function(fieldDef, index){\n    //save indices for stable sort later\n    indices[fieldDef.name] = index;\n\n    if (fieldDef.selected) {\n      selected.push(fieldDef);\n      if (isDimension(fieldDef) || fieldDef.type ==='T') { // FIXME / HACK\n        hasSelectedDimension = true;\n      } else {\n        hasSelectedMeasure = true;\n      }\n    } else if (fieldDef.selected !== false && !vl.encDef.isCount(fieldDef)) {\n      if (vl.encDef.isDimension(fieldDef) &&\n          !opt.maxCardinalityForAutoAddOrdinal &&\n          vl.encDef.cardinality(fieldDef, stats, 15) > opt.maxCardinalityForAutoAddOrdinal\n        ) {\n        return;\n      }\n      fieldsToAdd.push(fieldDef);\n    }\n  });\n\n  fieldsToAdd.sort(compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices));\n\n  var setsToAdd = util.chooseKorLess(fieldsToAdd, 1);\n\n  setsToAdd.forEach(function(setToAdd) {\n    var fieldSet = selected.concat(setToAdd);\n    if (fieldSet.length > 0) {\n      if (opt.omitDotPlot && fieldSet.length === 1) return;\n      fieldSets.push(fieldSet);\n    }\n  });\n\n  fieldSets.forEach(function(fieldSet) {\n      // always append projection's key to each projection returned, d3 style.\n    fieldSet.key = projections.key(fieldSet);\n  });\n\n  return fieldSets;\n}\n\nvar typeIsMeasureScore = {\n  N: 0,\n  O: 0,\n  T: 2,\n  Q: 3\n};\n\nfunction compareFieldsToAdd(hasSelectedDimension, hasSelectedMeasure, indices) {\n  return function(a, b){\n    // sort by type of the data\n    if (a.type !== b.type) {\n      if (!hasSelectedDimension) {\n        return typeIsMeasureScore[a.type] - typeIsMeasureScore[b.type];\n      } else { //if (!hasSelectedMeasure) {\n        return typeIsMeasureScore[b.type] - typeIsMeasureScore[a.type];\n      }\n    }\n    //make the sort stable\n    return indices[a.name] - indices[b.name];\n  };\n}\n\nprojections.key = function(projection) {\n  return projection.map(function(field) {\n    return vl.encDef.isCount(field) ? 'count' : field.name;\n  }).join(',');\n};\n\n","'use strict';\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  genEncodings = require('./encodings'),\n  getMarktypes = require('./marktypes'),\n  rank = require('../rank/rank'),\n  consts = require('../consts');\n\nmodule.exports = genSpecsFromFieldDefs;\n\n/** Design Encodings for a set of field definition */\n\nfunction genSpecsFromFieldDefs(output, fieldDefs, stats, opt, nested) {\n  // opt must be augmented before being passed to genEncodings or getMarktypes\n  opt = vl.schema.util.extend(opt||{}, consts.gen.encodings);\n  var encodings = genEncodings([], fieldDefs, stats, opt);\n\n  if (nested) {\n    return encodings.reduce(function(dict, encoding) {\n      dict[encoding] = genSpecsFromEncodings([], encoding, stats, opt);\n      return dict;\n    }, {});\n  } else {\n    return encodings.reduce(function(list, encoding) {\n      return genSpecsFromEncodings(list, encoding, stats, opt);\n    }, []);\n  }\n}\n\nfunction genSpecsFromEncodings(output, encoding, stats, opt) {\n  getMarktypes(encoding, stats, opt)\n    .forEach(function(markType) {\n      var spec = vl.duplicate({\n          // Clone config & encoding to unique objects\n          encoding: encoding,\n          config: opt.config\n        });\n\n      spec.marktype = markType;\n      // Data object is the same across charts: pass by reference\n      spec.data = opt.data;\n\n      spec = finalTouch(spec, stats, opt);\n      var score = rank.encoding(spec, stats, opt);\n\n      spec._info = score;\n      output.push(spec);\n    });\n  return output;\n}\n\n//FIXME this should be refactors\nfunction finalTouch(spec, stats, opt) {\n  if (spec.marktype === 'text' && opt.alwaysGenerateTableAsHeatmap) {\n    spec.encoding.color = spec.encoding.text;\n  }\n\n  // don't include zero if stdev/mean < 0.01\n  // https://github.com/uwdata/visrec/issues/69\n  var encoding = spec.encoding;\n  ['x', 'y'].forEach(function(encType) {\n    var field = encoding[encType];\n    if (field && vl.encDef.isMeasure(field) && !vl.encDef.isCount(field)) {\n      var stat = stats[field.name];\n      if (stat && stat.stdev / stat.mean < 0.01) {\n        field.scale = {zero: false};\n      }\n    }\n  });\n  return spec;\n}\n","'use strict';\n\nvar g = global || window;\n\nrequire('vega-lite/src/globals');\n\ng.CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\ng.ANY_DATA_TYPES = (1 << 4) - 1;","module.exports = {\n  encoding: require('./rankEncodings')\n};\n\n\n","'use strict';\n\nrequire('../globals');\n\nvar vl = (typeof window !== \"undefined\" ? window['vl'] : typeof global !== \"undefined\" ? global['vl'] : null),\n  isDimension = vl.encDef.isDimension;\n\nmodule.exports = rankEncodings;\n\n// bad score not specified in the table above\nvar UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  tick: 0.96,\n  point: 0.95,\n  circle: 0.94,\n  square: 0.94,\n  text: 0.8\n};\n\nfunction rankEncodings(spec, stats, opt, selected) {\n  var features = [],\n    encTypes = vl.keys(spec.encoding),\n    marktype = spec.marktype,\n    encoding = spec.encoding;\n\n  var encodingMappingByField = vl.enc.reduce(spec.encoding, function(o, fieldDef, encType) {\n    var key = vl.encDef.shorthand(fieldDef);\n    var mappings = o[key] = o[key] || [];\n    mappings.push({encType: encType, field: fieldDef});\n    return o;\n  }, {});\n\n  // data - encoding mapping score\n  vl.forEach(encodingMappingByField, function(mappings) {\n    var reasons = mappings.map(function(m) {\n        return m.encType + vl.shorthand.assign + vl.encDef.shorthand(m.field) +\n          ' ' + (selected && selected[m.field.name] ? '[x]' : '[ ]');\n      }),\n      scores = mappings.map(function(m) {\n        var role = vl.encDef.isDimension(m.field) ? 'dimension' : 'measure';\n\n        var score = rankEncodings.score[role](m.field, m.encType, spec.marktype, stats, opt);\n\n        return !selected || selected[m.field.name] ? score : Math.pow(score, 0.125);\n      });\n\n    features.push({\n      reason: reasons.join(\" | \"),\n      score: Math.max.apply(null, scores)\n    });\n  });\n\n  // plot type\n  if (marktype === TEXT) {\n    // TODO\n  } else {\n    if (encoding.x && encoding.y) {\n      if (isDimension(encoding.x) ^ isDimension(encoding.y)) {\n        features.push({\n          reason: 'OxQ plot',\n          score: 0.8\n        });\n      }\n    }\n  }\n\n  // penalize not using positional only penalize for non-text\n  if (encTypes.length > 1 && marktype !== TEXT) {\n    if ((!encoding.x || !encoding.y) && !encoding.geo && !encoding.text) {\n      features.push({\n        reason: 'unused position',\n        score: UNUSED_POSITION\n      });\n    }\n  }\n\n  // mark type score\n  features.push({\n    reason: 'marktype='+marktype,\n    score: MARK_SCORE[marktype]\n  });\n\n  return {\n    score: features.reduce(function(p, f) {\n      return p * f.score;\n    }, 1),\n    features: features\n  };\n}\n\n\nvar D = {}, M = {}, BAD = 0.1, TERRIBLE = 0.01;\n\nD.minor = 0.01;\nD.pos = 1;\nD.Y_T = 0.8;\nD.facet_text = 1;\nD.facet_good = 0.675; // < color_ok, > color_bad\nD.facet_ok = 0.55;\nD.facet_bad = 0.4;\nD.color_good = 0.7;\nD.color_ok = 0.65; // > M.Size\nD.color_bad = 0.3;\nD.color_stack = 0.6;\nD.shape = 0.6;\nD.detail = 0.5;\nD.bad = BAD;\nD.terrible = TERRIBLE;\n\nM.pos = 1;\nM.size = 0.6;\nM.color = 0.5;\nM.text = 0.4;\nM.bad = BAD;\nM.terrible = TERRIBLE;\n\nrankEncodings.dimensionScore = function (fieldDef, encType, marktype, stats, opt){\n  var cardinality = vl.encDef.cardinality(fieldDef, stats);\n  switch (encType) {\n    case X:\n      if (vl.encDef.isTypes(fieldDef, [N, O]))  return D.pos - D.minor;\n      return D.pos;\n\n    case Y:\n      if (vl.encDef.isTypes(fieldDef, [N, O])) return D.pos - D.minor; //prefer ordinal on y\n      if (fieldDef.type === T) return D.Y_T; // time should not be on Y\n      return D.pos - D.minor;\n\n    case COL:\n      if (marktype === TEXT) return D.facet_text;\n      //prefer column over row due to scrolling issues\n      return cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad;\n\n    case ROW:\n      if (marktype === TEXT) return D.facet_text;\n      return (cardinality <= opt.maxGoodCardinalityForFacets ? D.facet_good :\n        cardinality <= opt.maxCardinalityForFacets ? D.facet_ok : D.facet_bad) - D.minor;\n\n    case COLOR:\n      var hasOrder = (fieldDef.bin && fieldDef.type===Q) || (fieldDef.timeUnit && fieldDef.type===T);\n\n      //FIXME add stacking option once we have control ..\n      var isStacked = marktype === 'bar' || marktype === 'area';\n\n      // true ordinal on color is currently BAD (until we have good ordinal color scale support)\n      if (hasOrder) return D.color_bad;\n\n      //stacking gets lower score\n      if (isStacked) return D.color_stack;\n\n      return cardinality <= opt.maxGoodCardinalityForColor ? D.color_good: cardinality <= opt.maxCardinalityForColor ? D.color_ok : D.color_bad;\n    case SHAPE:\n      return cardinality <= opt.maxCardinalityForShape ? D.shape : TERRIBLE;\n    case DETAIL:\n      return D.detail;\n  }\n  return TERRIBLE;\n};\n\nrankEncodings.dimensionScore.consts = D;\n\nrankEncodings.measureScore = function (fieldDef, encType, marktype, stats, opt) {\n  // jshint unused:false\n  switch (encType){\n    case X: return M.pos;\n    case Y: return M.pos;\n    case SIZE:\n      if (marktype === 'bar') return BAD; //size of bar is very bad\n      if (marktype === TEXT) return BAD;\n      if (marktype === 'line') return BAD;\n      return M.size;\n    case COLOR: return M.color;\n    case TEXT: return M.text;\n  }\n  return BAD;\n};\n\nrankEncodings.measureScore.consts = M;\n\n\nrankEncodings.score = {\n  dimension: rankEncodings.dimensionScore,\n  measure: rankEncodings.measureScore,\n};\n","\"use strict\";\n\nvar consts = require('./consts');\n\nvar util = module.exports = {\n  gen: {}\n};\n\nutil.isArray = Array.isArray || function (obj) {\n  return {}.toString.call(obj) == '[object Array]';\n};\n\nutil.json = function(s, sp) {\n  return JSON.stringify(s, null, sp);\n};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.nestedMap = function (col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = util.nestedMap(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nestedReduce = function (col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = util.nestedReduce(v, f, level - 1);\n      return filter ? r.filter(util.nonEmpty) : r;\n    });\n};\n\nutil.nonEmpty = function(grp) {\n  return !util.isArray(grp) || grp.length > 0;\n};\n\n\nutil.traverse = function (node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) util.traverse(node.left, arr);\n    if (node.right) util.traverse(node.right, arr);\n  }\n  return arr;\n};\n\nutil.union = function (a, b) {\n  var o = {};\n  a.forEach(function(x) { o[x] = true;});\n  b.forEach(function(x) { o[x] = true;});\n  return util.keys(o);\n};\n\n\nutil.gen.getOpt = function (opt) {\n  //merge with default\n  return (opt ? util.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(consts.gen.DEFAULT_OPT));\n};\n\n/**\n * powerset code from http://rosettacode.org/wiki/Power_Set#JavaScript\n *\n *   var res = powerset([1,2,3,4]);\n *\n * returns\n *\n * [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],\n * [2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]\n[edit]\n*/\n\nutil.powerset = function(list) {\n  var ps = [\n    []\n  ];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = ps.length; j < len; j++) {\n      ps.push(ps[j].concat(list[i]));\n    }\n  }\n  return ps;\n};\n\nutil.chooseKorLess = function(list, k) {\n  var subset = [[]];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length <= k){\n        subset.push(sub);\n      }\n    }\n  }\n  return subset;\n};\n\nutil.chooseK = function(list, k) {\n  var subset = [[]];\n  var kArray =[];\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 0, len = subset.length; j < len; j++) {\n      var sub = subset[j].concat(list[i]);\n      if(sub.length < k){\n        subset.push(sub);\n      }else if (sub.length === k){\n        kArray.push(sub);\n      }\n    }\n  }\n  return kArray;\n};\n\nutil.cross = function(a,b){\n  var x = [];\n  for(var i=0; i< a.length; i++){\n    for(var j=0;j< b.length; j++){\n      x.push(a[i].concat(b[j]));\n    }\n  }\n  return x;\n};\n\n"],"sourceRoot":"/source/"}