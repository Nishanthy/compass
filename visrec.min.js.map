{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vr","visrec.js","src/visgen.js","src/visrank.js"],"names":["e","exports","module","define","amd","f","window","global","self","vr","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"gen","rank","./visgen","./visrank",2,"colenc","encoding","_colenc","enc","vl","keys","forEach","encType","duplicate","type","name","marktype","col","traverse","node","arr","undefined","value","push","left","right","isDim","field","bin","xOyQ","x","y","generalRule","opt","geo","text","arc","omitTranpose","row","omitAggrWithAllDimsOnFacets","hasAggr","hasOtherO","aggr","pointRule","shape","color","omitDotPlotWithExtraEncoding","barRule","lineRule","nestedMap","level","filter","map","v","nonEmpty","nestedReduce","reduce","getopt","c","k","Object","create","vgn","DEFAULT_OPT","union","b","range","start","stop","step","arguments","Infinity","j","d3_range_integerScale","abs","clusterfck","genAggr","genBin","genTypeCasting","aggrList","marktypeList","omitDimensionOnly","omitAggregateWithMeasureOnly","ENCODING_TYPES","encodingTypes","ANY_DATA_TYPES","DIST_BY_ENCTYPE","d","DIST_MISSING","CLUSTER_THRESHOLD","_getDistance","colenc1","colenc2","cols","dist","e1","e2","getDistanceTable","encodings","len","colencs","diff","Array","cluster","clusterTrees","hcluster","clusters","tree","marksRule","point","bar","line","area","ENCODING_RULES","dataTypes","O","Q","T","multiple","size","alpha","grp","isArray","generateCharts","fields","cfg","flat","charts","fieldSets","genAggregate","output","genFieldEncodings","genMarkTypes","_getSupportedMarkTypes","markType","markTypes","mark","marks","reqs","requiredEncoding","support","supportedEncoding","assignField","hasMeasure","hasDimension","hasRaw","tf","_aggr","aggregates","tmpEnc","et","obj","toString","Math","this",3,"vrank","ENCODING_SCORE","BAD_ENCODING_SCORE","UNUSED_POSITION","MARK_SCORE","circle","square","encodingScore","features","encTypes","score","unusedPosition","p","fieldsScore"],"mappings":"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","file":"visrec.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var vr = module.exports = {};\n\nvr.gen = require('./visgen');\nvr.rank = require('./visrank');\n\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vr=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar vr = module.exports = {};\n\nvr.gen = require('./visgen');\nvr.rank = require('./visrank');\n\n\n},{\"./visgen\":2,\"./visrank\":3}],2:[function(require,module,exports){\n(function (global){\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  clusterfck = (typeof window !== \"undefined\" ? window.clusterfck : typeof global !== \"undefined\" ? global.clusterfck : null);\n\nvar vgn = module.exports = {}; //VisGeN\n\nvgn.DEFAULT_OPT = {\n  genAggr: true,\n  genBin: true,\n  genTypeCasting: false,\n\n  aggrList: [undefined, \"avg\"], //undefined = no aggregation\n  marktypeList: [\"point\", \"bar\", \"line\", \"area\", \"text\"], //filled_map\n\n  // PRUNING RULES FOR ENCODING VARIATIONS\n\n  /**\n   * Eliminate all transpose\n   * - keeping horizontal dot plot only.\n   * - for OxQ charts, always put O on Y\n   * - show only one OxO, QxQ (currently sorted by name)\n   */\n  omitTranpose: true,\n  /** remove all dot plot with >1 encoding */\n  omitDotPlotWithExtraEncoding: true,\n\n  /** remove all aggregate charts with all dims on facets (row, col) */\n  //FIXME this is good for text though!\n  omitAggrWithAllDimsOnFacets: true,\n\n  // PRUNING RULES FOR TRANFORMATION VARIATIONS\n\n  /** omit field sets with only dimensions */\n  omitDimensionOnly: true,\n  /** omit aggregate field sets with only measures */\n  omitAggregateWithMeasureOnly: true\n\n};\n\nvar ENCODING_TYPES = vl.encodingTypes;\n\nvar CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\nvar ANY_DATA_TYPES = (1 << 4) - 1;\n\n//FIXME move these to vl\nvar AGGREGATION_FN = { //all possible aggregate function listed by each data type\n  Q: [\"avg\", \"sum\", \"min\", \"max\", \"count\"]\n};\n\nvar TRANSFORM_FN = { //all possible transform function listed by each data type\n  Q: [\"log\", \"sqrt\", \"abs\"], // \"logit?\"\n  T: [\"year\", \"month\", \"day\"] //,\"hr\", \"min\", \"bmon\", \"bday\", \"bdow\", \"bhr\"]\n};\n\nvar json = function(s,sp){ return JSON.stringify(s, null, sp);};\n\n// Begin of Distance\n\nvar DIST_BY_ENCTYPE = [\n    // positional\n    [\"x\", \"y\", 0.2],\n    [\"row\", \"col\", 0.2],\n\n    // ordinal mark properties\n    [\"color\", \"shape\", 0.2],\n\n    // quantitative mark properties\n    [\"color\", \"alpha\", 0.2],\n    [\"size\", \"alpha\", 0.2],\n    [\"size\", \"color\", 0.2]\n  ].reduce(function(r, x) {\n  var a=x[0], b=x[1], d=x[2];\n    r[a] = r[a] || {};\n    r[b] = r[b] || {};\n    r[a][b] = r[b][a] = d;\n    return r;\n  }, {}),\n  DIST_MISSING = 100, CLUSTER_THRESHOLD=1;\n\nfunction colenc(encoding) {\n  var _colenc = {},\n    enc = encoding.enc;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.type = encType;\n    _colenc[e.name || \"\"] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc\n  };\n}\n\nvgn._getDistance = function(colenc1, colenc2) {\n  var cols = union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.type != e2.type) {\n        dist += (DIST_BY_ENCTYPE[e1.type] || {})[e2.type] || 1;\n      }\n      //FIXME add aggregation\n    } else {\n      dist += DIST_MISSING;\n    }\n  });\n  return dist;\n};\n\nvgn.getDistanceTable = function(encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e){ return colenc(e);}),\n    diff = new Array(len), i;\n\n  for (i = 0; i < len; i++) diff[i] = new Array(len);\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      diff[j][i] = diff[i][j] = vgn._getDistance(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\nvgn.cluster = function(encodings, maxDistance) {\n  var dist = vgn.getDistanceTable(encodings),\n    n = encodings.length;\n\n  var clusterTrees = clusterfck.hcluster(range(n), function(i, j) {\n    return dist[i][j];\n  }, \"average\", CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n    return traverse(tree, []);\n  });\n\n  //console.log(\"clusters\", clusters.map(function(c){ return c.join(\"+\"); }));\n  return clusters;\n};\n\nfunction traverse(node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) traverse(node.left, arr);\n    if (node.right) traverse(node.right, arr);\n  }\n  return arr;\n}\n\n// End of Clustering\n\n\n// BEGINING OF RULES\n\n//TODO markTypesAggregateSupport\n\nvar marksRule = vgn.marksRule = generalRule;\nmarksRule.point = pointRule;\nmarksRule.bar = barRule;\nmarksRule.line = lineRule;\nmarksRule.area = lineRule;\n\nfunction isDim(field){\n  return field.bin || field.type === \"O\";\n}\n\nfunction xOyQ(enc) {\n  return enc.x && enc.y && isDim(enc.x) && isDim(enc.y);\n}\n\nfunction generalRule(enc, opt) {\n  // need at least one basic encoding\n  if (enc.x || enc.y || enc.geo || enc.text || enc.arc) {\n\n    if (enc.x && enc.y) {\n      // show only one OxO, QxQ\n      if (opt.omitTranpose && enc.x.type == enc.y.type) {\n        //TODO better criteria than name\n        if (enc.x.name > enc.y.name) return false;\n      }\n    }\n\n    if (enc.row || enc.col) { //have facet(s)\n      // don't use facets before filling up x,y\n      if ((!enc.x || !enc.y)) return false;\n\n      if (opt.omitAggrWithAllDimsOnFacets) {\n        // don't use facet with aggregate plot with other other ordinal on LOD\n\n        var hasAggr = false, hasOtherO = false;\n        for (var encType in enc) {\n          var field = enc[encType];\n          if (field.aggr) {\n            hasAggr = true;\n          }\n          if (isDim(field) && (encType !== \"row\" && encType !== \"col\")) {\n            hasOtherO = true;\n          }\n          if (hasAggr && hasOtherO) break;\n        }\n\n        if (hasAggr && !hasOtherO) return false;\n      }\n    }\n\n    // one dimension \"count\" is useless\n    if (enc.x && enc.x.aggr == \"count\" && !enc.y) return false;\n    if (enc.y && enc.y.aggr == \"count\" && !enc.x) return false;\n\n    return true;\n  }\n  return false;\n}\n\nfunction pointRule(enc, opt) {\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    // For OxQ\n    if (opt.omitTranpose && xOyQ(enc)) {\n      // if omitTranpose, put Q on X, O on Y\n      return false;\n    }\n\n    // For OxO\n    if (isDim(enc.x) && isDim(enc.y)) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDim(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction barRule(enc, opt) {\n  // need to aggregate on either x or y\n  if ((enc.x.aggr !== undefined) ^ (enc.y.aggr !== undefined)) {\n\n    // if omitTranpose, put Q on X, O on Y\n    if (opt.omitTranpose && xOyQ(enc)) return false;\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, opt) {\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x == \"T\" && enc.y == \"Q\";\n}\n\nvar ENCODING_RULES = {\n  x: {\n    dataTypes: vl.dataTypes.O + vl.dataTypes.Q + vl.dataTypes.T,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dataTypes: vl.dataTypes.O + vl.dataTypes.Q + vl.dataTypes.T,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dataTypes: vl.dataTypes.O,\n    multiple: true\n  },\n  col: {\n    dataTypes: vl.dataTypes.O,\n    multiple: true\n  },\n  shape: {\n    dataTypes: vl.dataTypes.O\n  },\n  size: {\n    dataTypes: vl.dataTypes.Q\n  },\n  color: {\n    dataTypes: vl.dataTypes.O + vl.dataTypes.Q\n  },\n  alpha: {\n    dataTypes: vl.dataTypes.Q\n  },\n  text: {\n    dataTypes: ANY_DATA_TYPES\n  }\n  //geo: {\n  //  dataTypes: [vl.dataTypes.G]\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\n// END OF RULES\n\n// Beginning of Chart Generation\n\nvar nonEmpty = function(grp) {\n  return !isArray(grp) || grp.length > 0;\n};\n\nfunction nestedMap(col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = nestedMap(v, f, level - 1);\n      return filter ? r.filter(nonEmpty) : r;\n    });\n}\n\nfunction nestedReduce(col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = nestedReduce(v, f, level - 1);\n      return filter ? r.filter(nonEmpty) : r;\n    });\n}\n\nfunction getopt(opt) {\n  //merge with default\n  return (opt ? vl.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(vgn.DEFAULT_OPT));\n}\n\nvgn.generateCharts = function(fields, opt, cfg, flat) {\n  opt = getopt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? vgn.genAggregate([], fields, opt) : [fields],\n    encodings, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggr)) {\n    encodings = fieldSets.reduce(function(output, fields) {\n      return vgn.genFieldEncodings(output, fields, opt);\n    }, []);\n  } else {\n    encodings = fieldSets.map(function(fields) {\n      return vgn.genFieldEncodings([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = nestedReduce(encodings, function(output, encodings) {\n      return vgn.genMarkTypes(output, encodings, opt, cfg);\n    }, level, true);\n  } else {\n    charts = nestedMap(encodings, function(encodings) {\n      return vgn.genMarkTypes([], encodings, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};\n\n\nvgn.genMarkTypes = function(output, enc, opt, cfg) {\n  opt = getopt(opt);\n  vgn._getSupportedMarkTypes(enc, opt)\n    .forEach(function(markType) {\n      output.push({ marktype: markType, enc: enc, cfg: cfg });\n    });\n  return output;\n};\n\n//TODO(kanitw): write test case\nvgn._getSupportedMarkTypes = function(enc, opt) {\n  var markTypes = opt.marktypeList.filter(function(markType) {\n    var mark = vl.marks[markType],\n      reqs = mark.requiredEncoding,\n      support = mark.supportedEncoding;\n\n    for (var i in reqs) { // all required encodings in enc\n      if (!(reqs[i] in enc)) return false;\n    }\n\n    for (var encType in enc) { // all encodings in enc are supported\n      if (!support[encType]) return false;\n    }\n\n    return !marksRule[markType] || marksRule[markType](enc, opt);\n  });\n\n  //console.log('enc:', json(enc), \" ~ marks:\", markTypes);\n\n  return markTypes;\n};\n\nvgn.genAggregate = function(output, fields, opt) {\n  var tf = new Array(fields.length);\n  opt = getopt(opt);\n\n  function assignField(i, hasAggr) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      if(opt.omitAggregateWithMeasureOnly || opt.omitDimensionOnly){\n        var hasMeasure=false, hasDimension=false, hasRaw=false;\n        tf.forEach(function(f){\n          if (isDim(f)) {\n            hasDimension = true;\n          } else {\n            hasMeasure = true;\n            if(!f.aggr) hasRaw = true;\n          }\n        });\n        if(!hasMeasure && opt.omitDimensionOnly) return;\n        if(!hasDimension && !hasRaw && opt.omitAggregateWithMeasureOnly) return;\n      }\n\n      output.push(vl.duplicate(tf));\n      return;\n    }\n\n    var f = fields[i];\n\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case \"Q\":\n        tf[i] = {name: f.name, type: f.type};\n        if (f.aggr) {\n          tf[i].aggr = f.aggr;\n          assignField(i + 1, true);\n        } else if (f._aggr) {\n          var aggregates = f._aggr == \"*\" ? opt.aggrList : f._aggr;\n\n          for (var j in aggregates) {\n            var a = aggregates[j];\n            if (a !== undefined) {\n              if (hasAggr === true || hasAggr === null) {\n                // must be aggregated, or no constraint\n                //set aggregate to that one\n                tf[i].aggr = a;\n                assignField(i + 1, true);\n              }\n            } else { // if(a === undefined)\n              if (hasAggr === false || hasAggr === null) {\n                // must be raw plot, or no constraint\n                delete tf[i].aggr;\n                assignField(i + 1, false);\n              }\n            }\n          }\n\n          if (opt.genBin) {\n            // bin the field instead!\n            delete tf[i].aggr;\n            tf[i].bin = true;\n            tf[i].type = \"Q\";\n            assignField(i + 1, hasAggr);\n          }\n\n          if (opt.genTypeCasting) {\n            // we can also change it to dimension (cast type=\"O\")\n            delete tf[i].aggr;\n            delete tf[i].bin;\n            tf[i].type = \"O\";\n            assignField(i + 1, hasAggr);\n          }\n        } else { // both \"aggr\", \"_aggr\" not in f\n          assignField(i + 1, false);\n        }\n        break;\n\n      case \"O\":\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr);\n        break;\n    }\n\n  }\n\n  assignField(0, null);\n\n  return output;\n};\n\n//TODO(kanitw): write test case\nvgn.genFieldEncodings = function(encodings, fields, opt) { // generate encodings (_enc property in vega)\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (marksRule(tmpEnc, opt)) {\n        encodings.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in ENCODING_TYPES) {\n      var et = ENCODING_TYPES[j];\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) &&\n        (ENCODING_RULES[et].dataTypes & vl.dataTypes[field.type]) > 0) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encodings;\n};\n\n// UTILITY\n\nvar isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nfunction union(a, b) {\n  var o = {};\n  a.forEach(function(x){ o[x] = true;});\n  b.forEach(function(x){ o[x] = true;});\n  return vl.keys(o);\n}\n\nvar abs = Math.abs;\n\nfunction range(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n  var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n  start *= k; stop *= k; step *= k;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n  return range;\n}\n\nfunction d3_range_integerScale(x) {\n  var k = 1;\n  while (x * k % 1) k *= 10;\n  return k;\n}\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],3:[function(require,module,exports){\n(function (global){\nvar vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null);\n\nvar vrank = module.exports = {};\n\n//TODO lower score if we use G as O?\nvar ENCODING_SCORE = {\n  Q: {\n    x: 1,\n    y: 1,\n    size: 0.6, //FIXME SIZE for Bar is horrible!\n    color: 0.4,\n    alpha: 0.4\n  },\n  O: { // TODO need to take cardinality into account\n    x: 0.99, // harder to read axis\n    y: 1,\n    row: 0.7,\n    col: 0.7,\n    color: 0.8,\n    shape: 0.6\n  }\n};\n\n// bad score not specified in the table above\nvar BAD_ENCODING_SCORE = 0.01,\n  UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  point: 0.96,\n  circle: 0.95,\n  square: 0.95,\n  text: 0.8\n};\n\nvrank.encodingScore = function(encoding){\n  var features = {},\n    encTypes = vl.keys(encoding.enc);\n  encTypes.forEach(function(encType){\n    var field = encoding.enc[encType];\n    features[field.name] = {\n      value: field.type+\":\"+encType,\n      score: ENCODING_SCORE[field.type][encType] || BAD_ENCODING_SCORE\n    };\n  });\n\n  // penalize not using positional\n  if(encTypes.length > 1){\n    if((!encoding.enc.x || !encoding.enc.y) && !encoding.enc.geo) {\n      features.unusedPosition = {score: UNUSED_POSITION};\n    }\n  }\n\n  features.markType = {\n    value: encoding.marktype,\n    score: MARK_SCORE[encoding.marktype]\n  }\n\n  return {\n    score: vl.keys(features).reduce(function(p, s){ return p * features[s].score}, 1),\n    features: features\n  };\n};\n\n\n// raw > avg, sum > min,max > bin\n\nvrank.fieldsScore = function(fields){\n\n};\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","var vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null),\n  clusterfck = (typeof window !== \"undefined\" ? window.clusterfck : typeof global !== \"undefined\" ? global.clusterfck : null);\n\nvar vgn = module.exports = {}; //VisGeN\n\nvgn.DEFAULT_OPT = {\n  genAggr: true,\n  genBin: true,\n  genTypeCasting: false,\n\n  aggrList: [undefined, \"avg\"], //undefined = no aggregation\n  marktypeList: [\"point\", \"bar\", \"line\", \"area\", \"text\"], //filled_map\n\n  // PRUNING RULES FOR ENCODING VARIATIONS\n\n  /**\n   * Eliminate all transpose\n   * - keeping horizontal dot plot only.\n   * - for OxQ charts, always put O on Y\n   * - show only one OxO, QxQ (currently sorted by name)\n   */\n  omitTranpose: true,\n  /** remove all dot plot with >1 encoding */\n  omitDotPlotWithExtraEncoding: true,\n\n  /** remove all aggregate charts with all dims on facets (row, col) */\n  //FIXME this is good for text though!\n  omitAggrWithAllDimsOnFacets: true,\n\n  // PRUNING RULES FOR TRANFORMATION VARIATIONS\n\n  /** omit field sets with only dimensions */\n  omitDimensionOnly: true,\n  /** omit aggregate field sets with only measures */\n  omitAggregateWithMeasureOnly: true\n\n};\n\nvar ENCODING_TYPES = vl.encodingTypes;\n\nvar CHART_TYPES = {\n  TABLE: 'TABLE',\n  BAR: 'BAR',\n  PLOT: 'PLOT',\n  LINE: 'LINE',\n  AREA: 'AREA',\n  MAP: 'MAP',\n  HISTOGRAM: 'HISTOGRAM'\n};\n\nvar ANY_DATA_TYPES = (1 << 4) - 1;\n\n//FIXME move these to vl\nvar AGGREGATION_FN = { //all possible aggregate function listed by each data type\n  Q: [\"avg\", \"sum\", \"min\", \"max\", \"count\"]\n};\n\nvar TRANSFORM_FN = { //all possible transform function listed by each data type\n  Q: [\"log\", \"sqrt\", \"abs\"], // \"logit?\"\n  T: [\"year\", \"month\", \"day\"] //,\"hr\", \"min\", \"bmon\", \"bday\", \"bdow\", \"bhr\"]\n};\n\nvar json = function(s,sp){ return JSON.stringify(s, null, sp);};\n\n// Begin of Distance\n\nvar DIST_BY_ENCTYPE = [\n    // positional\n    [\"x\", \"y\", 0.2],\n    [\"row\", \"col\", 0.2],\n\n    // ordinal mark properties\n    [\"color\", \"shape\", 0.2],\n\n    // quantitative mark properties\n    [\"color\", \"alpha\", 0.2],\n    [\"size\", \"alpha\", 0.2],\n    [\"size\", \"color\", 0.2]\n  ].reduce(function(r, x) {\n  var a=x[0], b=x[1], d=x[2];\n    r[a] = r[a] || {};\n    r[b] = r[b] || {};\n    r[a][b] = r[b][a] = d;\n    return r;\n  }, {}),\n  DIST_MISSING = 100, CLUSTER_THRESHOLD=1;\n\nfunction colenc(encoding) {\n  var _colenc = {},\n    enc = encoding.enc;\n\n  vl.keys(enc).forEach(function(encType) {\n    var e = vl.duplicate(enc[encType]);\n    e.type = encType;\n    _colenc[e.name || \"\"] = e;\n    delete e.name;\n  });\n\n  return {\n    marktype: encoding.marktype,\n    col: _colenc\n  };\n}\n\nvgn._getDistance = function(colenc1, colenc2) {\n  var cols = union(vl.keys(colenc1.col), vl.keys(colenc2.col)),\n    dist = 0;\n\n  cols.forEach(function(col) {\n    var e1 = colenc1.col[col], e2 = colenc2.col[col];\n\n    if (e1 && e2) {\n      if (e1.type != e2.type) {\n        dist += (DIST_BY_ENCTYPE[e1.type] || {})[e2.type] || 1;\n      }\n      //FIXME add aggregation\n    } else {\n      dist += DIST_MISSING;\n    }\n  });\n  return dist;\n};\n\nvgn.getDistanceTable = function(encodings) {\n  var len = encodings.length,\n    colencs = encodings.map(function(e){ return colenc(e);}),\n    diff = new Array(len), i;\n\n  for (i = 0; i < len; i++) diff[i] = new Array(len);\n\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      diff[j][i] = diff[i][j] = vgn._getDistance(colencs[i], colencs[j]);\n    }\n  }\n  return diff;\n};\n\nvgn.cluster = function(encodings, maxDistance) {\n  var dist = vgn.getDistanceTable(encodings),\n    n = encodings.length;\n\n  var clusterTrees = clusterfck.hcluster(range(n), function(i, j) {\n    return dist[i][j];\n  }, \"average\", CLUSTER_THRESHOLD);\n\n  var clusters = clusterTrees.map(function(tree) {\n    return traverse(tree, []);\n  });\n\n  //console.log(\"clusters\", clusters.map(function(c){ return c.join(\"+\"); }));\n  return clusters;\n};\n\nfunction traverse(node, arr) {\n  if (node.value !== undefined) {\n    arr.push(node.value);\n  } else {\n    if (node.left) traverse(node.left, arr);\n    if (node.right) traverse(node.right, arr);\n  }\n  return arr;\n}\n\n// End of Clustering\n\n\n// BEGINING OF RULES\n\n//TODO markTypesAggregateSupport\n\nvar marksRule = vgn.marksRule = generalRule;\nmarksRule.point = pointRule;\nmarksRule.bar = barRule;\nmarksRule.line = lineRule;\nmarksRule.area = lineRule;\n\nfunction isDim(field){\n  return field.bin || field.type === \"O\";\n}\n\nfunction xOyQ(enc) {\n  return enc.x && enc.y && isDim(enc.x) && isDim(enc.y);\n}\n\nfunction generalRule(enc, opt) {\n  // need at least one basic encoding\n  if (enc.x || enc.y || enc.geo || enc.text || enc.arc) {\n\n    if (enc.x && enc.y) {\n      // show only one OxO, QxQ\n      if (opt.omitTranpose && enc.x.type == enc.y.type) {\n        //TODO better criteria than name\n        if (enc.x.name > enc.y.name) return false;\n      }\n    }\n\n    if (enc.row || enc.col) { //have facet(s)\n      // don't use facets before filling up x,y\n      if ((!enc.x || !enc.y)) return false;\n\n      if (opt.omitAggrWithAllDimsOnFacets) {\n        // don't use facet with aggregate plot with other other ordinal on LOD\n\n        var hasAggr = false, hasOtherO = false;\n        for (var encType in enc) {\n          var field = enc[encType];\n          if (field.aggr) {\n            hasAggr = true;\n          }\n          if (isDim(field) && (encType !== \"row\" && encType !== \"col\")) {\n            hasOtherO = true;\n          }\n          if (hasAggr && hasOtherO) break;\n        }\n\n        if (hasAggr && !hasOtherO) return false;\n      }\n    }\n\n    // one dimension \"count\" is useless\n    if (enc.x && enc.x.aggr == \"count\" && !enc.y) return false;\n    if (enc.y && enc.y.aggr == \"count\" && !enc.x) return false;\n\n    return true;\n  }\n  return false;\n}\n\nfunction pointRule(enc, opt) {\n  if (enc.x && enc.y) {\n    // have both x & y ==> scatter plot / bubble plot\n\n    // For OxQ\n    if (opt.omitTranpose && xOyQ(enc)) {\n      // if omitTranpose, put Q on X, O on Y\n      return false;\n    }\n\n    // For OxO\n    if (isDim(enc.x) && isDim(enc.y)) {\n      // shape doesn't work with both x, y as ordinal\n      if (enc.shape) {\n        return false;\n      }\n\n      // TODO(kanitw): check that there is quant at least ...\n      if (enc.color && isDim(enc.color)) {\n        return false;\n      }\n    }\n\n  } else { // plot with one axis = dot plot\n    // Dot plot should always be horizontal\n    if (opt.omitTranpose && enc.y) return false;\n\n    // dot plot shouldn't have other encoding\n    if (opt.omitDotPlotWithExtraEncoding && vl.keys(enc).length > 1) return false;\n\n    // dot plot with shape is non-sense\n    if (enc.shape) return false;\n  }\n  return true;\n}\n\nfunction barRule(enc, opt) {\n  // need to aggregate on either x or y\n  if ((enc.x.aggr !== undefined) ^ (enc.y.aggr !== undefined)) {\n\n    // if omitTranpose, put Q on X, O on Y\n    if (opt.omitTranpose && xOyQ(enc)) return false;\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction lineRule(enc, opt) {\n  // TODO(kanitw): add omitVerticalLine as config\n\n  // Line chart should be only horizontal\n  // and use only temporal data\n  return enc.x == \"T\" && enc.y == \"Q\";\n}\n\nvar ENCODING_RULES = {\n  x: {\n    dataTypes: vl.dataTypes.O + vl.dataTypes.Q + vl.dataTypes.T,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  y: {\n    dataTypes: vl.dataTypes.O + vl.dataTypes.Q + vl.dataTypes.T,\n    multiple: true //FIXME should allow multiple only for Q, T\n  },\n  row: {\n    dataTypes: vl.dataTypes.O,\n    multiple: true\n  },\n  col: {\n    dataTypes: vl.dataTypes.O,\n    multiple: true\n  },\n  shape: {\n    dataTypes: vl.dataTypes.O\n  },\n  size: {\n    dataTypes: vl.dataTypes.Q\n  },\n  color: {\n    dataTypes: vl.dataTypes.O + vl.dataTypes.Q\n  },\n  alpha: {\n    dataTypes: vl.dataTypes.Q\n  },\n  text: {\n    dataTypes: ANY_DATA_TYPES\n  }\n  //geo: {\n  //  dataTypes: [vl.dataTypes.G]\n  //},\n  //arc: { // pie\n  //\n  //}\n};\n\n// END OF RULES\n\n// Beginning of Chart Generation\n\nvar nonEmpty = function(grp) {\n  return !isArray(grp) || grp.length > 0;\n};\n\nfunction nestedMap(col, f, level, filter) {\n  return level === 0 ?\n    col.map(f) :\n    col.map(function(v) {\n      var r = nestedMap(v, f, level - 1);\n      return filter ? r.filter(nonEmpty) : r;\n    });\n}\n\nfunction nestedReduce(col, f, level, filter) {\n  return level === 0 ?\n    col.reduce(f, []) :\n    col.map(function(v) {\n      var r = nestedReduce(v, f, level - 1);\n      return filter ? r.filter(nonEmpty) : r;\n    });\n}\n\nfunction getopt(opt) {\n  //merge with default\n  return (opt ? vl.keys(opt) : []).reduce(function(c, k) {\n    c[k] = opt[k];\n    return c;\n  }, Object.create(vgn.DEFAULT_OPT));\n}\n\nvgn.generateCharts = function(fields, opt, cfg, flat) {\n  opt = getopt(opt);\n  flat = flat === undefined ? {encodings: 1} : flat;\n\n  // TODO generate\n\n  // generate permutation of encoding mappings\n  var fieldSets = opt.genAggr ? vgn.genAggregate([], fields, opt) : [fields],\n    encodings, charts, level = 0;\n\n  if (flat === true || (flat && flat.aggr)) {\n    encodings = fieldSets.reduce(function(output, fields) {\n      return vgn.genFieldEncodings(output, fields, opt);\n    }, []);\n  } else {\n    encodings = fieldSets.map(function(fields) {\n      return vgn.genFieldEncodings([], fields, opt);\n    }, true);\n    level += 1;\n  }\n\n  if (flat === true || (flat && flat.encodings)) {\n    charts = nestedReduce(encodings, function(output, encodings) {\n      return vgn.genMarkTypes(output, encodings, opt, cfg);\n    }, level, true);\n  } else {\n    charts = nestedMap(encodings, function(encodings) {\n      return vgn.genMarkTypes([], encodings, opt, cfg);\n    }, level, true);\n    level += 1;\n  }\n  return charts;\n};\n\n\nvgn.genMarkTypes = function(output, enc, opt, cfg) {\n  opt = getopt(opt);\n  vgn._getSupportedMarkTypes(enc, opt)\n    .forEach(function(markType) {\n      output.push({ marktype: markType, enc: enc, cfg: cfg });\n    });\n  return output;\n};\n\n//TODO(kanitw): write test case\nvgn._getSupportedMarkTypes = function(enc, opt) {\n  var markTypes = opt.marktypeList.filter(function(markType) {\n    var mark = vl.marks[markType],\n      reqs = mark.requiredEncoding,\n      support = mark.supportedEncoding;\n\n    for (var i in reqs) { // all required encodings in enc\n      if (!(reqs[i] in enc)) return false;\n    }\n\n    for (var encType in enc) { // all encodings in enc are supported\n      if (!support[encType]) return false;\n    }\n\n    return !marksRule[markType] || marksRule[markType](enc, opt);\n  });\n\n  //console.log('enc:', json(enc), \" ~ marks:\", markTypes);\n\n  return markTypes;\n};\n\nvgn.genAggregate = function(output, fields, opt) {\n  var tf = new Array(fields.length);\n  opt = getopt(opt);\n\n  function assignField(i, hasAggr) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      if(opt.omitAggregateWithMeasureOnly || opt.omitDimensionOnly){\n        var hasMeasure=false, hasDimension=false, hasRaw=false;\n        tf.forEach(function(f){\n          if (isDim(f)) {\n            hasDimension = true;\n          } else {\n            hasMeasure = true;\n            if(!f.aggr) hasRaw = true;\n          }\n        });\n        if(!hasMeasure && opt.omitDimensionOnly) return;\n        if(!hasDimension && !hasRaw && opt.omitAggregateWithMeasureOnly) return;\n      }\n\n      output.push(vl.duplicate(tf));\n      return;\n    }\n\n    var f = fields[i];\n\n    // Otherwise, assign i-th field\n    switch (f.type) {\n      //TODO \"D\", \"G\"\n      case \"Q\":\n        tf[i] = {name: f.name, type: f.type};\n        if (f.aggr) {\n          tf[i].aggr = f.aggr;\n          assignField(i + 1, true);\n        } else if (f._aggr) {\n          var aggregates = f._aggr == \"*\" ? opt.aggrList : f._aggr;\n\n          for (var j in aggregates) {\n            var a = aggregates[j];\n            if (a !== undefined) {\n              if (hasAggr === true || hasAggr === null) {\n                // must be aggregated, or no constraint\n                //set aggregate to that one\n                tf[i].aggr = a;\n                assignField(i + 1, true);\n              }\n            } else { // if(a === undefined)\n              if (hasAggr === false || hasAggr === null) {\n                // must be raw plot, or no constraint\n                delete tf[i].aggr;\n                assignField(i + 1, false);\n              }\n            }\n          }\n\n          if (opt.genBin) {\n            // bin the field instead!\n            delete tf[i].aggr;\n            tf[i].bin = true;\n            tf[i].type = \"Q\";\n            assignField(i + 1, hasAggr);\n          }\n\n          if (opt.genTypeCasting) {\n            // we can also change it to dimension (cast type=\"O\")\n            delete tf[i].aggr;\n            delete tf[i].bin;\n            tf[i].type = \"O\";\n            assignField(i + 1, hasAggr);\n          }\n        } else { // both \"aggr\", \"_aggr\" not in f\n          assignField(i + 1, false);\n        }\n        break;\n\n      case \"O\":\n      default:\n        tf[i] = f;\n        assignField(i + 1, hasAggr);\n        break;\n    }\n\n  }\n\n  assignField(0, null);\n\n  return output;\n};\n\n//TODO(kanitw): write test case\nvgn.genFieldEncodings = function(encodings, fields, opt) { // generate encodings (_enc property in vega)\n  var tmpEnc = {};\n\n  function assignField(i) {\n    // If all fields are assigned, save\n    if (i === fields.length) {\n      // at the minimal all chart should have x, y, geo, text or arc\n      if (marksRule(tmpEnc, opt)) {\n        encodings.push(vl.duplicate(tmpEnc));\n      }\n      return;\n    }\n\n    // Otherwise, assign i-th field\n    var field = fields[i];\n    for (var j in ENCODING_TYPES) {\n      var et = ENCODING_TYPES[j];\n\n      //TODO: support \"multiple\" assignment\n      if (!(et in tmpEnc) &&\n        (ENCODING_RULES[et].dataTypes & vl.dataTypes[field.type]) > 0) {\n        tmpEnc[et] = field;\n        assignField(i + 1);\n        delete tmpEnc[et];\n      }\n    }\n  }\n\n  assignField(0);\n\n  return encodings;\n};\n\n// UTILITY\n\nvar isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nfunction union(a, b) {\n  var o = {};\n  a.forEach(function(x){ o[x] = true;});\n  b.forEach(function(x){ o[x] = true;});\n  return vl.keys(o);\n}\n\nvar abs = Math.abs;\n\nfunction range(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n  var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n  start *= k; stop *= k; step *= k;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n  return range;\n}\n\nfunction d3_range_integerScale(x) {\n  var k = 1;\n  while (x * k % 1) k *= 10;\n  return k;\n}","var vl = (typeof window !== \"undefined\" ? window.vl : typeof global !== \"undefined\" ? global.vl : null);\n\nvar vrank = module.exports = {};\n\n//TODO lower score if we use G as O?\nvar ENCODING_SCORE = {\n  Q: {\n    x: 1,\n    y: 1,\n    size: 0.6, //FIXME SIZE for Bar is horrible!\n    color: 0.4,\n    alpha: 0.4\n  },\n  O: { // TODO need to take cardinality into account\n    x: 0.99, // harder to read axis\n    y: 1,\n    row: 0.7,\n    col: 0.7,\n    color: 0.8,\n    shape: 0.6\n  }\n};\n\n// bad score not specified in the table above\nvar BAD_ENCODING_SCORE = 0.01,\n  UNUSED_POSITION = 0.5;\n\nvar MARK_SCORE = {\n  line: 0.99,\n  area: 0.98,\n  bar: 0.97,\n  point: 0.96,\n  circle: 0.95,\n  square: 0.95,\n  text: 0.8\n};\n\nvrank.encodingScore = function(encoding){\n  var features = {},\n    encTypes = vl.keys(encoding.enc);\n  encTypes.forEach(function(encType){\n    var field = encoding.enc[encType];\n    features[field.name] = {\n      value: field.type+\":\"+encType,\n      score: ENCODING_SCORE[field.type][encType] || BAD_ENCODING_SCORE\n    };\n  });\n\n  // penalize not using positional\n  if(encTypes.length > 1){\n    if((!encoding.enc.x || !encoding.enc.y) && !encoding.enc.geo) {\n      features.unusedPosition = {score: UNUSED_POSITION};\n    }\n  }\n\n  features.markType = {\n    value: encoding.marktype,\n    score: MARK_SCORE[encoding.marktype]\n  }\n\n  return {\n    score: vl.keys(features).reduce(function(p, s){ return p * features[s].score}, 1),\n    features: features\n  };\n};\n\n\n// raw > avg, sum > min,max > bin\n\nvrank.fieldsScore = function(fields){\n\n};\n\n"],"sourceRoot":"/source/"}